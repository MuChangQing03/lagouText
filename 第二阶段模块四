一 框架简介
1.1 三层架构
软件开发常用的架构是三层架构，之所以流行是因为有着清晰的任务划分。一般包括以下三层：
持久层：主要完成与数据库相关的操作，即对数据库的增删改查。

因为数据库访问的对象一般称为Data Access Object（简称DAO），所以有人把持久层叫做DAO层。
业务层：主要根据功能需求完成业务逻辑的定义和实现。

因为它主要是为上层提供服务的，所以有人把业务层叫做Service层或Business层。
表现层：主要完成与最终软件使用用户的交互，需要有交互界面（UI）。

因此，有人把表现层称之为web层或View层。
三层架构之间调用关系为 : 表现层调用业务层，业务层调用持久层。
各层之间必然要进行数据交互，我们一般使用 java 实体对象来传递数据。
1.2 框架
1.2.1 什么是框架？
框架就是一套规范，既然是规范，你使用这个框架就要遵守这个框架所规定的约束。

框架可以理解为半成品软件，框架做好以后，接下来在它基础上进行开发。

1.2.2 为什么使用框架？
框架为我们封装好了一些冗余，且重用率低的代码。并且使用反射与动态代理机制，将代码实现了通用性，让 开发人员把精力专注在核心的业务代码实现上。

比如在使用servlet进行开发时，需要在servlet获取表单的参数，每次都要获取很麻烦，而框架底层就使用反射机制和拦截器机制帮助我们获取表单的值，使用jdbc每次做专一些简单的crud的时候都必须写sql，但使用框架就不需要这么麻烦了，直接调用方法就可以。当然，既然是使用框架，那么还是要遵循其一些规范进行配置

1.2.3 常见的框架
Java世界中的框架非常的多，每一个框架都是为了解决某一部分或某些问题而存在的。下面列出在目前企业中流行的几种框架（一定要注意他们是用来解决哪一层问题的）：

持久层框架：专注于解决数据持久化的框架。常用的有mybatis、hibernate、spring jdbc等等。

表现层框架：专注于解决与用户交互的框架。常见的有struts2、spring mvc等等。

全栈框架: 能在各层都给出解决方案的框架。比较著名的就是spring。

这么多框架，我们怎么选择呢?

我们以企业中最常用的组合为准来学习Spring + Spring MVC + mybatis（SSM）

二 Mybatis简介
MyBatis是一个优秀的基于ORM的半自动轻量级持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码

mybatis 历史
MyBatis 本是apache的一个开源项目iBatis, 2010年6月这个项目由apache software foundation 迁移到了google code，随着开发团队转投到Google Code旗下，iBatis正式改名为MyBatis ，代码于2013年11月迁移到Github

2.1 ORM思想
ORM（Object Relational Mapping）对象关系映射

O（对象模型）：

        实体对象，即我们在程序中根据数据库表结构建立的一个个实体javaBean

R（关系型数据库的数据结构）：

        关系数据库领域的Relational（建立的数据库表）

M（映射）：

        从R（数据库）到O（对象模型）的映射，可通过XML文件映射

实现：

（1）让实体类和数据库表进行一一对应关系

                先让实体类和数据库表对应

                再让实体类属性和表里面字段对应

（2）不需要直接操作数据库表，直接操作表对应的实体类对象

ORM 作为是一种思想
帮助我们跟踪实体的变化,并将实体的变化翻译成sql脚本,执行到数据库中去,也就是将实体的变化映射到了表的变化。

mybatis采用ORM思想解决了实体和数据库映射的问题，对jdbc 进行了封装，屏蔽了jdbc api 底层访问细节，使我们不用与jdbc api 打交道，就可以完成对数据库的持久化操作


三 Mybatis快速入门
3.1 MyBatis开发步骤
MyBatis 官网地址： http://www.mybatis.org/mybatis-3/
 
案例需求：通过 mybatis 查询数据库 user 表的所有记录，封装到 User 对象中，打印到控制台上
步骤分析：
1. 创建数据库及 user 表
2. 创建 maven 工程，导入依赖（ MySQL 驱动、 mybatis 、 junit ）
3. 编写 User 实体类
4. 编写 UserMapper.xml 映射配置文件（ ORM 思想）
5. 编写 SqlMapConfig.xml 核心配置文件
数据库环境配置

映射关系配置的引入(引入映射配置文件的路径)

6. 编写测试代码



MyBatis常用配置解析

1) environments 标签
数据库环境的配置，支持多环境配置

1. 其中，事务管理器（ transactionManager ）类型有两种：
- JDBC：

这个配置就是直接使用了JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。

- MANAGED：

这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期。

例如：mybatis与spring整合后，事务交给spring容器管理。

2. 其中，数据源（ dataSource ）常用类型有三种：
- UNPOOLED：

 

这个数据源的实现只是每次被请求时打开和关闭连接。

- POOLED：

这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来。

- JNDI :

这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用

2 ） properties 标签
实际开发中，习惯将数据源的配置信息单独抽取成一个 properties文件，该标签可以加载额外配置的 properties ：
jdbc.driver=com.mysql.jdbc.Driver

jdbc.url=jdbc:mysql:///mybatis_db

jdbc.username = root
 
jdbc.password = root

3 ） typeAliases 标签
类型别名是为 Java 类型设置一个短的名字。

4 ） mappers 标签
该标签的作用是加载映射的，加载方式有如下几种：
1. 使用相对于类路径的资源引用，例如：
<mapper resource = "org/mybatis/builder/userMapper.xml" />
2. 使用完全限定资源定位符（ URL ），例如：
<mapper url = "file:///var/mappers/userMapper.xml" />
《下面两种 mapper 代理开发中使用 : 暂时了解》
3. 使用映射器接口实现类的完全限定类名，例如：
<mapper class = "org.mybatis.builder.userMapper" />
4. 将包内的映射器接口实现全部注册为映射器，例如：
<package name = "org.mybatis.builder" />


七 Mybatis的API概述
7.1 API介绍
7.1.1 SqlSession工厂构建器SqlSessionFactoryBuilder
常用API：SqlSessionFactory build(InputStream inputStream)

通过加载mybatis的核心文件的输入流的形式构建一个SqlSessionFactory对象


其中， Resources 工具类，这个类在 org.apache.ibatis.io 包中。Resources 类帮助你从类路径下、文件系统或一个 web URL 中加载资源文件。

7.1.2 SqlSession工厂对象SqlSessionFactory
SqlSessionFactory 有多个个方法创建SqlSession 实例

7.1.3 SqlSession会话对象
SqlSession 实例在 MyBatis 中是非常强大的一个类。在这里你会看到所有执行语句、提交或回滚事务和获取映射器实例的方法。



八 Mybatis的dao层开发使用  
8.1 传统方式问题思考：
1.实现类中，存在mybatis模板代码重复

2.实现类调用方法时，xml中的sql statement 硬编码到java代码中

思考：能否只写接口，不写实现类。只编写接口和Mapper.xml即可？

 

因为在dao（mapper）的实现类中对sqlsession的使用方式很类似。因此mybatis提供了接口的动态代理。

8.2 代理开发方式
1 ）介绍
采用 Mybatis 的基于接口代理方式实现 持久层 的开发，这种方式是我们后面进入企业的主流。

基于接口代理方式的开发只需要程序员编写 Mapper 接口，Mybatis 框架会为我们动态生成实现类的对象。

这种开发方式要求我们遵循一定的规范：

Mapper.xml映射文件中的namespace与mapper接口的全限定名相同
Mapper接口方法名和Mapper.xml映射文件中定义的每个statement的id相同
Mapper接口方法的输入参数类型和mapper.xml映射文件中定义的每个sql的parameterType的类型相同
Mapper接口方法的输出参数类型和mapper.xml映射文件中定义的每个sql的resultType的类型相同
Mapper接口开发方法只需要程序员编写Mapper 接口（相当于Dao 接口），由Mybatis 框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。

MyBatis加载策略
6.1 什么是延迟加载？
问题

通过前面的学习，我们已经掌握了Mybatis中一对一，一对多，多对多关系的配置及实现，可以实现对象的关联查询。实际开发过程中很多时候我们并不需要总是在加载用户信息时就一定要加载他的订单信息。此时就是我们所说的延迟加载。
延迟加载

就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载。

6.2.1 局部延迟加载
在association和collection标签中都有一个fetchType属性，通过修改它的值，可以修改局部的加载策略。 

 6.2.2 设置触发延迟加载的方法

大家在配置了延迟加载策略后，发现即使没有调用关联对象的任何方法，但是在你调用当前对象的 equals、clone、hashCode、toString方法时也会触发关联对象的查询。

我们可以在配置文件中使用lazyLoadTriggerMethods配置项覆盖掉上面四个方法。

6.2.3 全局延迟加载
在Mybatis的核心配置文件中可以使用setting标签修改全局的加载策略。

    <settings>
        <!--所有方法都会延迟加载-->
        <setting name="lazyLoadTriggerMethods" value="toString()"/>
    </settings>
注意局部的加载策略优先级高于全局的加载策略。

MyBatis缓存
7.1 为什么使用缓存？
当用户频繁查询某些固定的数据时,第一次将这些数据从数据库中查询出来,保存在缓存中。当用户再次查询这些数据时,不用再通过数据库查询,而是去缓存里面查询。减少网络连接和数据库查询带来的损耗,从而提高我们的查询效率,减少高并发访问带来的系统性能问题。

一句话概括：经常查询一些不经常发生变化的数据，使用缓存来提高查询效率。

像大多数的持久化框架一样，Mybatis也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提高性能。 Mybatis中缓存分为一级缓存，二级缓存。

7.2 一级缓存
7.2.1 介绍
一级缓存是SqlSession级别的缓存，是默认开启的所以在参数和SQL完全一样的情况下，我们使用同一个SqlSession对象调用一个Mapper方法，往往只执行一次SQL，因为使用SelSession第一次查询后，MyBatis会将其放在缓存中，以后再查询的时候，如果没有声明需要刷新，并且缓存没有超时的情况下，SqlSession都会取出当前缓存的数据，而不会再次发送SQL到数据库。

二级缓存
7.3.1 介绍
二级缓存是namspace级别（跨sqlSession）的缓存，当sqlSession.close之后会把数据放到二级缓冲中，是默认不开启的

二级缓存的开启需要进行配置，实现二级缓存的时候，MyBatis要求返回的POJO必须是可序列化的。

也就是要求实现Serializable接口，配置方法很简单，只需要在映射XML文件配置 <cache/> 就可以开启二级缓存了。

MyBatis注解
8.1 MyBatis常用注解
这几年来注解开发越来越流行，Mybatis也可以使用注解开发方式，这样我们就可以减少编写 Mapper映射文件了。

* @Insert：实现新增，代替了<insert></insert>

* @Delete：实现删除，代替了<delete></delete>

* @Update：实现更新，代替了<update></update>

* @Select：实现查询，代替了<select></select>

* @Result：实现结果集封装，代替了<result></result>

* @Results：可以与@Result 一起使用，封装多个结果集，代替了<resultMap></resultMap>

* @One：实现一对一结果集封装，代替了<association></association>

* @Many：实现一对多结果集封装，代替了<collection></collection>





一 Spring概述
1.1 Spring是什么
Spring是分层的 Java SE/EE应用 full-stack(全栈式) 轻量级开源框架。

提供了表现层 SpringMVC和持久层 Spring JDBC Template以及 业务层 事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架。

两大核心：以 IOC（Inverse Of Control：控制反转）和 AOP（Aspect Oriented Programming：面向切面编程）为内核。

1.2 Spring优势 
1 ）方便解耦，简化开发
Spring就是一个容器，可以将所有对象创建和关系维护交给Spring管理

什么是耦合度？对象之间的关系，通常说当一个模块(对象)更改时也需要更改其他模块(对象)，这就是耦合，耦合度过高会使代码的维护成本增加。要尽量解耦

2 ） AOP 编程的支持
Spring提供面向切面编程，方便实现程序进行权限拦截，运行监控等功能。

3 ）声明式事务的支持
通过配置完成事务的管理，无需手动编程

4 ）方便测试，降低 JavaEE API 的使用
Spring对Junit4支持，可以使用注解测试

5 ）方便集成各种优秀框架
不排除各种优秀的开源框架，内部提供了对各种优秀框架的直接支持

二 初识IOC
2.1 概述
控制反转（Inverse Of Control）不是什么技术，而是一种设计思想。它的目的是指导我们设计出更加松耦合的程序。

控制：在 java 中指的是对象的控制权限（创建、销毁）
反转：指的是对象控制权由原来 由开发者在类中手动控制 反转到 由 Spring 容器控制
举个栗子  

* 传统方式
之前我们需要一个userDao实例，需要开发者自己手动创建 new UserDao();

* IOC 方式
现在我们需要一个userDao实例，直接从spring的IOC容器获得，对象的创建权交给了spring控制

三 Spring快速入门
3.1 介绍
需求 ：借助 spring 的 IOC 实现 service 层与 dao 层代码解耦合
步骤分析 
1. 创建 java 项目，导入 spring 开发基本坐标
2. 编写 Dao 接口和实现类
3. 创建 spring 核心配置文件
4. 在 spring 配置文件中配置 UserDaoImpl
5. 使用 spring 相关 API 获得 Bean 实例

3.3 知识小结

Spring 的开发步骤
1. 导入坐标
2. 创建 Bean
3. 创建 applicationContext.xml
4. 在配置文件中进行 Bean 配置
5. 创建 ApplicationContext 对象，执行 getBean

四 Spring相关API
4.1 API继承体系介绍
Spring的API体系异常庞大，我们现在只关注两个BeanFactory和ApplicationContext

4.2 BeanFactory
BeanFactory 是 IOC 容器的核心接口，它定义了 IOC 的基本功能。
特点：在第一次调用 getBean() 方法时，创建指定对象的实例
BeanFactory beanFactory = new XmlBeanFactory ( new ClassPathResource ( "applicationContext.xml" ));
4.3 ApplicationContext
代表应用上下文对象，可以获得 spring 中 IOC 容器的 Bean 对象。
特点：在 spring 容器启动时，加载并创建所有对象的实例
常用实现类

1. ClassPathXmlApplicationContext
它是从类的根路径下加载配置文件 推荐使用这种。

2. FileSystemXmlApplicationContext
它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。

3. AnnotationConfigApplicationContext
当使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。

ApplicationContext app = new ClassPathXmlApplicationContext ( "applicationContext.xml" );
 
常用方法

1. Object getBean ( String name );
根据Bean的id从容器中获得Bean实例，返回是Object，需要强转。

2. < T > T getBean ( Class < T > requiredType );
根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时，则此方法会报错。

3. < T > T getBean ( String name , Class < T > requiredType );
根据Bean的id和类型获得Bean实例，解决容器中相同类型Bean有多个情况。



五 Spring配置文件
5.1 Bean标签基本配置  
<bean id = "" class = "" ></bean>
* 用于配置对象交由 Spring 来创建。
* 基本属性：
id：Bean实例在Spring容器中的唯一标识

class：Bean的全限定名

* 默认情况下它调用的是类中的 无参构造函数，如果没有无参构造函数则不能创建成功。
5.2 Bean标签范围配置 
<bean id = "" class = "" scope = "" ></bean>

1. 当 scope 的取值为 singleton 时
Bean的实例化个数：1个

Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例

Bean的生命周期：

对象创建：当应用加载，创建容器时，对象就被创建了

对象运行：只要容器在，对象一直活着

对象销毁：当应用卸载，销毁容器时，对象就被销毁了

2. 当 scope 的取值为 prototype 时
Bean的实例化个数：多个

Bean的实例化时机：当调用getBean()方法时实例化Bean

Bean的生命周期：

对象创建：当使用对象时，创建新的对象实例

对象运行：只要对象在使用中，就一直活着

对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了

5.3 Bean生命周期配置  
<bean id = "" class = "" scope = "" init-method = "" destroy-method = "" ></bean>
* init-method：指定类中的初始化方法名称

* destroy-method：指定类中销毁方法名称

5.4 Bean实例化三种方式
无参构造方法实例化
工厂静态方法实例化
工厂普通方法实例化
5.4.1 无参构造方法实例化
它会根据默认无参构造方法来创建类对象，如果bean中没有默认无参构造函数，将会创建失败

<bean id="userDao" class="com.lagou.dao.impl.UserDaoImpl"/>
5.4.2 工厂静态方法实例化
应用场景
依赖的 jar 包中有个 A 类， A 类中有个静态方法 m1 ， m1 方法的返回值是一个 B对象。如果我们频繁使用B 对象，此时我们可以将 B 对象的创建权交给 spring 的 IOC 容器，以后我们在使用 B 对象时，无需调用 A类中的 m1 方法，直接从 IOC 容器获得。
public class StaticFactoryBean { 
    public static UserDao createUserDao(){ 
        return new UserDaoImpl(); 
    } 
}
<bean id="userDao" class="com.lagou.factory.StaticFactoryBean" factory-method="createUserDao" />
5.4.3 工厂普通方法实例化
应用场景
依赖的 jar 包中有个 A 类， A 类中有个普通方法 m1 ， m1 方法的返回值是一个 B对象。如果我们频繁使用 B对象， 此时我们可以将 B 对象的创建权交给 spring 的 IOC 容器，以后我们在使用 B 对象时，无需调用 A 类中的m1 方法，直接从 IOC 容器获得。
public class DynamicFactoryBean { 
    public UserDao createUserDao(){ 
        return new UserDaoImpl(); 
    } 
}
<bean id="dynamicFactoryBean" class="com.lagou.factory.DynamicFactoryBean"/> 
<bean id="userDao" factory-bean="dynamicFactoryBean" factory-method="createUserDao"/>
5.5 Bean依赖注入概述
依赖注入 DI（Dependency Injection）：它是 Spring 框架核心 IOC 的具体实现。

在编写程序时，通过控制反转，把对象的创建交给了 Spring，但是代码中不可能出现没有依赖的情况。IOC 解耦只是降低他们的依赖关系，但不会消除。例如：业务层仍会调用持久层的方法。

那这种业务层和持久层的依赖关系，在使用 Spring 之后，就让 Spring 来维护了。简单的说，就是通过框架把持久层对象传入业务层，而不用我们自己去获取。

5.6 Bean依赖注入方式
5.6.1 构造方法
在 UserServiceImpl 中创建有参构造
public interface UserService {
    public void save();
}
public class UserServiceImpl implements UserService {
    private UserDao userDao;
    public UserServiceImpl(UserDao userDao){
        this.userDao=userDao;
    }
    @Override
    public void save() {
        userDao.save();;
    }
}
配置Spring容器调用有参构造时进行注入

    <bean id="userDao" class="com.bigload.daoImpl.UserDaoImpl"/>
    <bean id="userService" class="com.bigload.daoImpl.UserServiceImpl">
        <constructor-arg name="userDao" ref="userDao"/>
    </bean>
5.6.2 set方法
在 UserServiceImpl 中创建 set 方法
public class UserServiceImpl implements UserService {
 
    private UserDao userDao;
//    public UserServiceImpl(UserDao userDao){
//        this.userDao=userDao;
//    }
    public void setUserDao(UserDao userDao) {
        this.userDao = userDao;
    }
 
    @Override
    public void save() {
        userDao.save();;
    }
}
配置 Spring 容器调用 set 方法进行注入
    <bean id="userService" class="com.bigload.daoImpl.UserServiceImpl">
        <property name="userDao" ref="userDao"/>
    </bean>
5.6.3 P命名空间注入
P 命名空间注入本质也是 set 方法注入，但比起上述的 set方法注入更加方便，主要体现在配置文件中，如下：
首先，需要引入 P 命名空间：
xmlns:p="http://www.springframework.org/schema/p"
其次，需要修改注入方式：

    <bean id="userService" class="com.bigload.daoImpl.UserServiceImpl" p:userDao-ref="userDao">
    </bean>
5.7 Bean依赖注入的数据类型
上面操作，都是注入Bean对象，除了对象的引用可以注入，普通数据类型和集合都可以在容器中进行注入。

注入数据的三种数据类型

1. 普通数据类型

2. 引用数据类型

3. 集合数据类型

其中引用数据类型，此处就不再赘述了，之前的操作都是对UserDao对象的引用进行注入的。下面将以set方法注入为例，演示普通数据类型和集合数据类型的注入。

5.8 配置文件模块化
实际开发中，Spring的配置内容非常多，这就导致Spring配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，也就是所谓的配置文件模块化。

1 ）并列的多个配置文件
ApplicationContext act = new ClassPathXmlApplicationContext ( "beans1.xml" , "beans2.xml" , "..." );
2 ）主从配置文件
<import resource = "applicationContext-xxx.xml" />
注意：
同一个xml中不能出现相同名称的bean,如果出现会报错

多个xml如果出现相同名称的bean，不会报错，但是后加载的会覆盖前加载的bean

5.9 知识小结
Spring 的重点配置
<bean> 标签：创建对象并放到 spring 的 IOC 容器
id属性:在容器中Bean实例的唯一标识，不允许重复

class属性:要实例化的Bean的全限定名

scope属性:Bean的作用范围，常用是Singleton(默认)和prototype

<constructor-arg> 标签：属性注入
使用构造方法生成
name属性：属性名称

value属性：注入的普通属性值

ref属性：注入的对象引用值

<property> 标签：属性注入
使用set成员变量方法，例setAge()
name属性：属性名称

value属性：注入的普通属性值

ref属性：注入的对象引用值

<list>

<set>

<array>

<map>

<props>

<import> 标签 : 导入其他的 Spring 的分文件

七 Spring注解开发
Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置文件可以简化配置，提高开发效率。

7.1 Spring常用注解
7.1.1 介绍
Spring 常用注解主要是替代 <bean> 的配置
 
注解
说明
@Component	使用在类上用于实例化Bean
@Controller	使用在web层类上用于实例化Bean
@Service	使用在service层类上用于实例化Bean
@Repository	使用在dao层类上用于实例化Bean
@Autowired	使用在字段上用于根据类型依赖注入
@Qualifier	结合@Autowired一起使用,根据名称进行依赖注入
@Resource	相当于@Autowired+@Qualifier，按照名称进行注入
@Value	注入普通属性
@Scope	标注Bean的作用范围
@PostConstruct	使用在方法上标注该方法是Bean的初始化方法
@PreDestroy	使用在方法上标注该方法是Bean的销毁方法
说明：
JDK11 以后完全移除了 javax 扩展导致不能使用 @resource 注解
需要 maven 引入依赖
<dependency>
    <groupId> javax.annotation </groupId>
    <artifactId> javax.annotation-api </artifactId>
    <version> 1.3.2 </version>
</dependency>
注意
使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean需要进行扫描以便识别使用注解配置的类、字段和方法。  

<!-- 注解的组件扫描 -->
<context:component-scan base-package = "com.lagou" ></context:component-scan>
7.1.2 实现
1 ） Bean 实例化（ IOC ）
<bean id="userDao" class="com.bigload.daoImpl.UserDaoImpl"></bean>
 使用@Compont或@Repository标识UserDaoImpl需要Spring进行实例化。

//@Component(value = "userDao")
@Repository(value = "userDao")
//@Repository // 如果没有写value属性值，Bean的id为：类名首字母小写 
public class UserDaoImpl implements UserDao {...} 
2）属性依赖注入（DI）

<bean id="userService" class="com.bigload.daoImpl.UserServiceImpl">
    <property name="userDao" ref="userDao"/>
</bean>
使用@Autowired或者@Autowired+@Qulifier或者@Resource进行userDao的注入

@Service(value = "userService")
public class UserServiceImpl implements UserService {
    @Autowired
    private UserDao userDao;
 
 
    @Override
    public void save() {
        userDao.save();;
    }
}
3）@Value

使用 @Value 进行字符串的注入，结合 SPEL 表达式获得配置参数
@Service
public class UserServiceImpl implements UserService {
    @Value ( " 注入普通数据 " )
    private String str ;
    @Value ( "${jdbc.driver}" )
    private String driver ;
 /*list集合注入*/
 @Value("#{{'ab',1,'c'}}")
 private List alist;
}
4）@Scope

<bean scope=""/> 

使用@Scope标注Bean的范围

 

@Service
@Scope ( "singleton" )
public class UserServiceImpl implements UserService {...}
 
5）Bean生命周期

<bean init-method="init" destroy-method="destory" />  

使用@PostConstruct标注初始化方法，使用@PreDestroy标注销毁方法

@PostConstruct
public void init(){
    System.out.println("初始化方法....");
}
@PreDestroy
public void destroy(){
    System.out.println("销毁方法.....");
}


Proxy优化转账案例
我们可以将业务代码和事务代码进行拆分，通过动态代理的方式，对业务方法进行事务的增强。这样就不会对业务层产生影响，解决了耦合性的问题啦！

常用的动态代理技术
JDK 代理 : 基于接口的动态代理技术·：利用拦截器（必须实现invocationHandler）加上反射机制生成 一个代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理，从而实现方法增强
CGLIB代理：基于父类的动态代理技术：动态生成一个要代理的子类，子类重写要代理的类的所有不是 final的方法。在子类中采用方法拦截技术拦截所有的父类方法的调用，顺势织入横切逻辑，对方法进行 增强

2.1 JDK动态代理方式
Jdk工厂类
@Component
public class JdkProxyFactory {
    @Autowired
    private AccountService accountService;
 
    @Autowired
    private TransactionManager transactionManager;
 
    public AccountService createAccountServiceJdkProxy() {
        AccountService accountServiceProxy = null;
        accountServiceProxy = (AccountService) Proxy.newProxyInstance(
                accountService.getClass().getClassLoader(),
                accountService.getClass().getInterfaces(),
                new InvocationHandler() {
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                Object result = null;
                try {
                    // 1.开启事务
                    transactionManager.beginTransaction();
                    // 2.业务操作
                    result = method.invoke(accountService, args);
                    // 3.提交事务
                    transactionManager.commit();
                } catch (Exception e) {
                    e.printStackTrace();
                    // 4.回滚事务
                    transactionManager.rollback();
                } finally {
                    // 5.释放资源
                    transactionManager.release();
                }
                return result;
            }
        });
        return accountServiceProxy;
    }
}
AccountService

@Service("accountService")
public class AccountServiceImpl implements AccountService {
 
    @Autowired
    private AccountDao accountDao;
 
    public void transfer(String outUser, String inUser, Double money) {
 
            accountDao.out(outUser,money);
//            int a=1/0;
            accountDao.in(inUser,money);
    }
}
测试

    @Test
    public void test2(){
        AccountService accountServiceJdkProxy = jdkProxyFactory.createAccountServiceJdkProxy();
        accountServiceJdkProxy.transfer("tom","jerry",100d);
    }
2.2 CGLIB动态代理方式
Cglib 工厂类
@Component
public class CglibProxyFactory {
    @Autowired
    private AccountService accountService;
    @Autowired
    private TransactionManager transactionManager;
 
    public AccountService createAccountServiceCglibProxy() {
        AccountService accountServiceProxy = null;
        /** 参数一：目标对象的字节码对象 * 参数二：动作类，实现增强功能 * */
        accountServiceProxy = (AccountService) Enhancer.create(accountService.getClass(), new MethodInterceptor() {
            @Override
            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
                Object result = null;
                try {
                    // 1.开启事务
                    transactionManager.beginTransaction();
                    // 2.业务操作
                    result = method.invoke(accountService, objects);
                    // 3.提交事务
                    transactionManager.commit();
                } catch (Exception e) {
                    e.printStackTrace();
                    // 4.回滚事务
                    transactionManager.rollback();
                } finally {
                    // 5.释放资源
                    transactionManager.release();
                }
                return result;
            }
        });
        return accountServiceProxy;
    }
}


三 初识AOP
3.1 什么是AOP
AOP 为 Aspect Oriented Programming 的缩写，意思为面向切面编程

AOP 是 OOP（面向对象编程） 的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。

这样做的好处是 ：
1. 在程序运行期间，在不修改源码的情况下对方法进行功能增强
2. 逻辑清晰，开发核心业务的时候，不必关注增强业务的代码
3. 减少重复代码，提高开发效率，便于后期维护
3.2 AOP底层实现
实际上，AOP 的底层是通过 Spring 提供的的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。

3.3 AOP相关术语
Spring 的 AOP 实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。

在正式讲解 AOP 的操作之前，我们必须理解 AOP 的相关术语，常用的术语如下：

* Target（目标对象）：代理的目标对象

* Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类

* Joinpoint（连接点）：所谓连接点是指那些可以被拦截到的点。在spring中,这些点指的是方法，因为 spring只支持方法类型的连接点

* Pointcut（切入点）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义

* Advice（通知/ 增强）：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知 分类：前置通知、后置通知、异常通知、最终通知、环绕通知

* Aspect（切面）：是切入点和通知（引介）的结合

* Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织 入，而AspectJ采用编译期织入和类装载期织入

3.4 AOP开发明确事项
3.4.1 开发阶段（我们做的）
1. 编写核心业务代码（目标类的目标方法） 切入点
2. 把公用代码抽取出来，制作成通知（增强功能方法） 通知
3. 在配置文件中，声明切入点与通知间的关系，即切面

3.4.2 运行阶段（Spring框架完成的）
Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。

3.4.3 底层代理实现
在 Spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。

当bean实现接口时，会用JDK代理模式
当bean没有实现接口，用cglib实现（ 可以强制使用cglib（在spring配置中加入<aop:aspectj-autoproxy proxyt-target-class=”true”/>）
3.5 知识小结
* aop：面向切面编程
* aop底层实现：基于JDK的动态代理 和 基于Cglib的动态代理
* aop的重点概念：

Pointcut（切入点）：真正被增强的方法
Advice（通知/ 增强）：封装增强业务逻辑的方法
Aspect（切面）：切点+通知
Weaving（织入）：将切点与通知结合，产生代理对象的过程


四 基于XML的AOP开发
4.1 快速入门
步骤分析

1. 创建java项目，导入AOP相关坐标
2. 创建目标接口和目标实现类（定义切入点）
3. 创建通知类及方法（定义通知）
4. 将目标类和通知类对象创建权交给spring
5. 在核心配置文件中配置织入关系，及切面
6. 编写测试代码


4.2 XML配置AOP详解
4.2.1 切点表达式
表达式语法：

execution([修饰符] 返回值类型 包名.类名.方法名(参数))

访问修饰符可以省略
返回值类型、包名、类名、方法名可以使用星号 * 代替，代表任意包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类
参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表
例如：

execution(public void com.lagou.service.impl.AccountServiceImpl.transfer())
execution(void com.lagou.service.impl.AccountServiceImpl.*(..))
execution(* com.lagou.service.impl.*.*(..))
execution(* com.lagou.service..*.*(..))

切点表达式抽取
当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用 pointcut-ref 属性代替pointcut 属性来引用抽取后的切点表达式。

<aop:config>
  <!--抽取的切点表达式-->
<aop:pointcut id="myPointcut" expression="execution(* com.lagou.service..*.*(..))"> </aop:pointcut>
  <aop:aspect ref="myAdvice">
    <aop:before method="before" pointcut-ref="myPointcut"></aop:before>
  </aop:aspect>
</aop:config>

4.2.2 通知类型
通知的配置语法：

 <aop:通知类型 method=“通知类中方法名” pointcut=“切点表达式"></aop:通知类型>

名称	标签	说明
前置通知	<aop:before>	用于配置前置通知。指定增强的方法在切入点方法之前执行
后置通知	<aop:afterReturning>	用于配置后置通知。指定增强的方法在切入点方法之后执行
异常通知	<aop:afterThrowing>	用于配置异常通知。指定增强的方法出现异常后执行
最终通知	<aop:after>	用于配置最终通知。无论切入点方法执行时是否有异常，都会执行
环绕通知	<aop:around>	用于配置环绕通知。开发者可以手动控制增强代码在什么时候执行
注意：通常情况下，环绕通知都是独立使用的
4.3 知识小结 
* aop织入的配置
  <aop:config>
    <aop:aspect ref=“通知类”>
      <aop:before method=“通知方法名称” pointcut=“切点表达式"></aop:before>
    </aop:aspect>
  </aop:config>
                           
* 通知的类型
前置通知、后置通知、异常通知、最终通知、环绕通知
* 切点表达式
execution([修饰符] 返回值类型 包名.类名.方法名(参数))

五 基于注解的AOP开发
5.1 快速入门
步骤分析 

1. 创建java项目，导入AOP相关坐标
2. 创建目标接口和目标实现类（定义切入点）
3. 创建通知类（定义通知）
4. 将目标类和通知类对象创建权交给spring
5. 在通知类中使用注解配置织入关系，升级为切面类
6. 在配置文件中开启组件扫描和 AOP 的自动代理
7. 编写测试代码



一 Spring的JdbcTemplate
1.1 JdbcTemplate是什么？
JdbcTemplate是spring框架中提供的一个模板对象，是对原始繁琐的Jdbc API对象的简单封装。

核心对象

JdbcTemplate jdbcTemplate = new JdbcTemplate(DataSource dataSource);

核心方法

  int update(); 执行增、删、改语句

  List<T>  query(); 查询多个
  T queryForObject(); 查询一个
  new BeanPropertyRowMapper<>(); 实现ORM映射封装


二 Spring的事务                                                                                               
2.1 Spring中的事务控制方式                                                                                        
Spring的事务控制可以分为编程式事务控制和声明式事务控制。

编程式

  开发者直接把事务的代码和业务代码耦合到一起，在实际开发中不用。

声明式

  开发者采用配置的方式来实现的事务控制，业务代码与事务代码实现解耦合，使用的AOP思想。

2.2 编程式事务控制相关对象【了解】                                                                         
2.2.1 PlatformTransactionManager                                                            
  PlatformTransactionManager接口，是spring的事务管理器，里面提供了我们常用的操作事务的方法。

方法            

说明
TransactionStatus getTransaction(TransactionDefinition definition);	获取事务的状态信息
void commit(TransactionStatus status)；	提交事务
void rollback(TransactionStatus status)；	回滚事务
注意：

  * PlatformTransactionManager 是接口类型，不同的 Dao 层技术则有不同的实现类。

  * Dao层技术是jdbcTemplate或mybatis时：
          DataSourceTransactionManager
          
  * Dao层技术是hibernate时：
          HibernateTransactionManager
          
  * Dao层技术是JPA时：
          JpaTransactionManager

2.2.2 TransactionDefinition                                                                 
  TransactionDefinition接口提供事务的定义信息（事务隔离级别、事务传播行为等等） 

方法   

说明
int getIsolationLevel()  	获得事务的隔离级别
int getPropogationBehavior()	获得事务的传播行为
int getTimeout()	获得超时时间
boolean isReadOnly()	是否只读
1）事务隔离级别

  设置隔离级别，可以解决事务并发产生的问题，如脏读、不可重复读和虚读（幻读）。

* ISOLATION_DEFAULT            	使用数据库默认级别
* ISOLATION_READ_UNCOMMITTED	读未提交
* ISOLATION_READ_COMMITTED	读已提交
* ISOLATION_REPEATABLE_READ	可重复读
* ISOLATION_SERIALIZABLE	串行化
2）事务传播行为

  事务传播行为指的就是当一个业务方法【被】另一个业务方法调用时，应该如何进行事务控制。 

参数  

说明
REQUIRED	如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）
SUPPORTS	支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）
MANDATORY	使用当前的事务，如果当前没有事务，就抛出异常
REQUERS_NEW	新建事务，如果当前在事务中，把当前事务挂起
NOT_SUPPORTED	以非事务方式执行操作，如果当前存在事务，就把当前事务挂起
NEVER	
 以非事务方式运行，如果当前存在事务，抛出异常

NESTED	 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行REQUIRED 类似的操作
  * read-only（是否只读）：建议查询时设置为只读

  * timeout（超时时间）：默认值是-1，没有超时限制。如果有，以秒为单位进行设置

2.2.3 TransactionStatus                                                                     
  TransactionStatus 接口提供的是事务具体的运行状态。

方法

说明
boolean isNewTransaction()	是否是新事务
boolean hasSavepoint()  	是否是回滚点
boolean isRollbackOnly()  	事务是否回滚
boolean isCompleted()	事务是否完成
可以简单的理解三者的关系：事务管理器通过读取事务定义参数进行事务管理，然后会产生一系列的事务状态。


         
  Spring中的事务控制主要就是通过这三个API实现的
  * PlatformTransactionManager 负责事务的管理，它是个接口，其子类负责具体工作

  * TransactionDefinition 定义了事务的一些相关参数

  * TransactionStatus 代表事务运行的一个实时状态

理解三者的关系：事务管理器通过读取事务定义参数进行事务管理，然后会产生一系列的事务状态。

2.3 基于XML的声明式事务控制【重点】                                                                     
  在 Spring 配置文件中声明式的处理事务来代替代码式的处理事务。底层采用AOP思想来实现的。

声明式事务控制明确事项：

     核心业务代码(目标对象)  （切入点是谁？）
     事务增强代码(Spring已提供事务管理器)）（通知是谁？）
     切面配置（切面如何配置？）


2.4 基于注解的声明式事务控制【重点】                                                                                 
2.4.1 常用注解                                                                                                
步骤分析

  1. 修改service层，增加事务注解
  2. 修改spring核心配置文件，开启事务注解支持


三 Spring集成web环境                                                                                       
3.1 ApplicationContext应用上下文获取方式
应用上下文对象是通过new ClasspathXmlApplicationContext(spring配置文件)  方式获取的，但是每次从容器中获得Bean时都要编写 new ClasspathXmlApplicationContext(spring配置文件) ，这样的弊端是配置文件加载多次，应用上下文对象创建多次。
   解决思路分析：

在Web项目中，可以使用ServletContextListener监听Web应用的启动，我们可以在Web应用启动时，就加载Spring的配置文件，创建应用上下文对象ApplicationContext，在将其存储到最大的域servletContext域中，这样就可以在任意位置从域中获得应用上下文ApplicationContext对象了。

3.2 Spring提供获取应用上下文的工具                                                                                    
  上面的分析不用手动实现，Spring提供了一个监听器ContextLoaderListener就是对上述功能的封装，该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到ServletContext域中，提供了一个客户端工具WebApplicationContextUtils供使用者获得应用上下文对象。

所以我们需要做的只有两件事：

   1. 在web.xml中配置ContextLoaderListener监听器（导入spring-web坐标）
   2. 使用WebApplicationContextUtils获得应用上下文对象ApplicationContext

