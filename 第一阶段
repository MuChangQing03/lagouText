# 一.计算机基本概念

# 二. 进制之间

## 2.1 二进制

```
如： 1011 0111， 最左边：0 为非负数，1 为负数
1
```

## **2.2 十进制----->二进制 ：**

```
除2取余，余数逆序排列 ，格式：0b/0B(java中二进制的前缀) 1011 0010
将十进制拆分为若干个二进制权重的和，有权重写1，无为0.
二进制权重： … 128 64 32 16 8 4 2 1
Ex: 45 => 32+8+4+1   => 0010 1101
1234
```

## **2.3 二进制----->十进制：**

```
0010 1101 = 0*2^7 + 0*2^6 + 1*2^5  + 0*2^4 + 1*2^3 +1*2^2 + 0*2^1 + 1*2^0
1
```

## **2.4 负数十进制----->二进制**：

注意：（高位溢出，丢弃）

```
-45，
第一步：取45的二进制 0010 1101   		
第二步： 取反，1101 0010 
第三步： 加1， 1101 0011
1234
```

## **2.5 负二进制-----> 十进制：**

```
1101 0011，减一 取反添加负号
1101 0011 - 1 = 1101 0010 
取反：  0010 1101 = 45 --> -45
123
```

## 2.6 非负数所表示范围

```
0000 0000  ~ 0111 111 = 0 ~ 127= 0 ~ 2^7 -1
负数范围: 1000 0000 ~ 1111 1111 => -128 ~ -1 => -2^7 ~ -2^0   
12
```

# 三. 常量与变量

常量：是指在Java程序中固定不变的数据。

```
System.out.println(123); 123 就是常量
1
```

变量：在程序中可以变化的量称为变量。

```
int x = 123; x = 321; x保存的数据可以改变，就是变量
1
```

# 四.数据类型：

基础类型（byte, short, int ,long, float . double, Boolean, char
引用类型（数组，类，接口，枚举，标注。。。。 String属于引用类
Long 和 long 不一样，Long是一个包装类，在后续笔记中会详细说明。

# 五. 字节

Java语言中描述整数数据的类型有：byte、short、int、long，荐int类型

```
单个字节表示的范围 -128 ~ 127 ，
1
```

• 其中**byte类型**在内存空间中占1个字节0000 0000 (8 bits)，表示范围是：-2^7 ~ 2^7-1.

• 其中**short类型**在内存空间中占2个字节，表示范围是：-2^15 ~ 2^15-1.

• 其中**int类型**在内存空间中占4个字节，表示范围是：-2^31 ~ 2^31-1.

```
Integer 常量取值范围-128 ~ 127
1
```

• 其中**long类型**在内存空间中占8个字节，表示范围是：-2^63 ~ 2^63-1.

```
Long.toHexString(long 类型)； Long.toHexString(10) => 十六进制 a , 10= A in Hex
1
```

• **char类型**在内存空间中占2个字节并且没有符号位，表示的范围是： 0 ~ 65535.

```
用于描述单个字符的数据类型：char类型。如：'a'、 '中'等
1
```

ASCII : 字符类型 ‘0’ – 48 , ‘A’- 65 , ‘a’ – 97, 空格 32, 换行符- 32 (会经常用到，需记)

# 六. 关于类型之间的转换

## **6.1 自动转换**

字节小到大自动转换，大到小会报错除非强制转换。

范围小的类型向范围大的类型提升， byte、short、char 运算时直接提升为 int 。

```
byte、short、char‐‐>int‐‐>long‐‐>float‐‐>double
1
```

## **6.2 强制类型转换**

将 取值范围大的类型 强制转换成 取值范围小的类型, 强制转换可能会发生异常和数据丢失等。如：浮点转成整数，直接取消小数点，可能造成数据损失精度。 int 强制转成 short 砍掉2个字节，可能造成数据丢失。

**注意：**

```java
Int i = 25;
byte = i;
12
```

分析：会报错， 因为类型不兼容，25是直接量，i 是变量，变量的值是可能变化的，在编译的时候，编译器javac不确定的结果是什么，尽管这里变量就是int类型，若不是int 类型 结果也会以int类型进行处理，所以int类型不能赋值给byte类型，因此编译失败。

# 七. 运算：

## **7.1 关系比较, 逻辑运算符**

```
> , >=, <, <= , == ,!= 
1
```

**• && 表示逻辑与运算符**，相当于"并且"，同真为真，一假为假。A&&B 若A为假，则B不执行

**• || 表示逻辑或运算符**，相当于"或者"，一真为真，同假为假。A||B 若A为真，则B不执行

**• ! 表示逻辑非运算符**，相当于"取反"，真为假，假为真

**• 三目**，布尔类型（判断条件）表达式？结果1：结果2， true返回 结果1或者 false 返回结果2

## 7.2 ==的运用

基本数据类型（也称原始数据类型） ：byte,short,char,int,long,float,double,boolean。他们之间的比较，应用双等号（==）,比较的是他们的值。

引用数据类型：当他们用（==）进行比较的时候，比较的是他们在内存中的存放地址（确切的说，是堆内存地址）。

```
java在编译的时候 Integer a = 1000; Integer b =1000; a==b; is False； a.equals(b); is True
1
```

## 7.3 自增减运算：

```
ia = 12 ； int ib = ia++; ib = 12 但是 ia 本身 ++ 后变成了 13

int ic = ++ ia; ic = 14, ia = 14

(ia++ + ++ia)= ( 14 + 16) 首先 ia ++ = 14， ia本身++ 后 就变成了15， ++ia = 16 
12345
```

当两个整数相除时结果只保留整数部分，丢弃小数部分5/2=2

**(5\*1.0 / 2) = 2.5**让其中一个操作数乘以1.0 保留小数位，相当于操作数转换为double类型

## 7.4 符号 +=：

带有强制转换的特点。

```java
public static void main(String[] args){
	short num = 1;
	num += 1;
	System.out.println(num);
}
12345
```

分析： num += 1 逻辑上看作是 num = num + 1 计算结果被提升为int类型，再向short类型赋值时发生错误，因为不能将取值范围
大的类型赋值到取值范围小的类型。但是，num = num + 1 进行两次运算 ， += 是一个运算符，只运算一次，并带有强制转换的特点，
也就是说 num += 1就是 num = (short)(num + 1) ，因此程序没有问题编译通过，运行结果是2.

# 八. 条件，循环，判断

## **8.1 Switch Case**

在switch语句中，如果case的后面不写break，将出现穿透现象
穿透现象：不会在判断下一个case的值，直接向后运行，直到遇到break，或者整体switch结束。

## **8.2 continue**

循环里有**continue**表示 提前结束本次循环，继续下一次循环

## 8.3 break

break为跳出break所在的一个循环；

## 8.4 outer

```
跳出外层循环需要加标号  在外层

outer: for ( ){   

for() { outer break;}

}
1234567
```

## 8.5 for, do while, while

```
For( ；；) 无限循环

do{ } while (); 先do 然后再判断是否符合while条件，符合继续do

while( ); { }  ; 相当于 while( ){ ; } { 内容} 不执行内容， 一直在 ； 内运行
12345
```

**for 和 while 的区别：**
控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，而while循环结束还可以继
续使用，如果你想继续使用，就用while，否则推荐使用for。原因是for循环结束，该变量就从内存中消
失，能够提高内存的使用效率。

**在已知循环次数的时候使用推荐使用for，循环次数未知的时推荐使用while。**

# 九. 数组的理解：

数组概念： 数组就是存储数据长度固定的容器，保证多个数据的数据类型要一致。
注意：数组有定长特性，长度一旦指定，不可更改。
数组的最大索引值为 数组名.length-1，数组的索引是 0 到 lenght-1

## **9.1 一维数组：**

int[] seats= new int[30]; //声明 得到地址，这个地址告诉你 那边帮你创建了一排座位，这一排一共30个 然后 seats[1] =20; 这里的 数据 必须是 int类型， 因为声明的是个 int类型的 数组seats；20 可以代表 第二个座位上的人 的年纪，成绩 等 int 类型的数据

数组在栈中储存的是 堆的地址 ，元素都在堆区里

```
int Arr1  [] = new int [5]; 
System.out.print(Arr1);  // 得到的是 地址， 所以必须使用循环获取数组元素

int arr2 [] = new int [5]; 
arr2 = Arr1; // 这里相当于arr2也指向Arr1 堆的内存地址 而不是复制元素。
arr2 创建的新的地址 若是没有用到，则会被java回收
123456
```

## **9.2 二维数组**

由多个一维数组组成

```
Int [ ][ ] brr = new int[2][6] ，2行6列
brr.length 代表行数 brr的元素长度, brr[0].length 第一个元素的长度，第0的列数
12
```

二维数组中可以申明， 每行不同列的数组

**在运用for 双循环时，外循环代表行，内循环代表列**
