面向对象编程

• 面向对象指以属性和行为的观点去分析现实生活中的事物。

• 面向对象编程指先以面向对象的思想进行分析，然后使用面向对象的编程语言 进行表达的过程。

• 面向对象编程是软件产业化发展的需求。

• 面向对象的思想精髓(封装、继承、多态)

类和对象
• 对象主要指现实生活中客观存在的实体，在Java语言中对象体现为内存空 间中的一块存储区域。

• 类简单来就是“分类”，是对具有相同特征和行为的多个对象共性的抽象描 述，在Java语言中体现为一种引用数据类型，里面包含了描述特征/属性 的成员变量以及描述行为的成员方法。

• 类是用于构建对象的模板，对象的数据结构由定义它的类来决定。

类的定义
• class 类名 {
            类体;

   }

• 注意：

通常情况下，当类名由多个单词组成时，要求每个单词首字母都要大写。

成员变量的定义

• class 类名 {
         数据类型 成员变量名 = 初始值;

}

引用
  使用引用数据类型定义的变量叫做引用型变量。
  引用变量主要用于记录对象在堆区中的内存地址信息
   
   语法格式

       类名 引用变量名;

       引用变量名.成员变量名;
       
       
成员方法

  class 类名 {
        返回值类型 成员方法名(形参列表) {
                成员方法体;

        }
}

返回值类型

    • 返回值主要指从方法体内返回到方法体外的数据内容。

    • 返回值类型主要指返回值的数据类型，可以是基本数据类型，也可以是 引用数据类型。

    • 当返回的数据内容是66时，则返回值类型写 int 即可

    • 在方法体中使用return关键字可以返回具体的数据内容并结束当前方法。

    • 当返回的数据内容是66时，则方法体中写 return 66; 即可

    • 当该方法不需要返回任何数据内容时，则返回值类型写void即可
    
    
 形参列表
    形式参数列表主要指多个形式参数组成的列表，语法格式如下：
             数据类型 形参变量名1, 数据类型 形参变量名2, ..
             
    若该方法不需要带入任何数据内容时，则形参列表位置啥也不写即可
 
    将方法体外的数据内容带入到方法体内部
 
 方法的调用
      返回值类型 方法名(参数的类型... 参数名)
      
 参数传递
      基本数据类型的变量作为方法的参数传递时，形参变量数值的改变通常不会影响到实参变量的数值，因为两个变量有各自独立的内存空间
        • 参数分为形参和实参，定义方法时的参数叫形参，调用方法时传递的参数叫实参。

        • 调用方法时采用值传递把实参传递给形参，方法内部其实是在使用形参
    
构造方法
  class 类名 {
          类名(形参列表) {
              构造方法体;

          }
}
    构造方法名与类名完全相同并且没有返回值类型
    
默认构造方法
    一个类中没有定义任何构造方法时，编译器会自动添加一个无参空构造构造方法
 
 
 this
     this关键字本质上就是当前类类型的引用变量
     若在构造方法中出现了this关键字，则代表当前正在构造的对象
     若在成员方法中出现了this关键字，则代表当前正在调用的对象
     
     注意事项
          引用类型变量用于存放对象的地址，可以给引用类型赋值为null，表示不指向任何对象。
          
          
封装
      • 私有化成员变量，使用private关键字修饰。

      • 提供公有的get和set方法，并在方法体中进行合理值的判断。

      • 在构造方法中调用set方法进行合理值的判断。
      
 
 static关键字
        使用static关键字修饰成员变量表示静态的含义，此时成员变量由对象层级提升为类层级
        static关键字修饰的成员可以使用引用.的方式访问
        在非静态成员方法中既能访问非静态的成员又能访问静态的成员
        在静态成员方法中只能访问静态成员不能访问非静态成员
 
构造块和静态代码块

        • 构造块：在类体中直接使用{}括起来的代码块。

        • 静态代码块：使用static关键字修饰的构造块。

单例设计模式
        在某些特殊场合中，一个类对外提供且只提供一个对象时，这样的类叫做单例类，而设计单例的流程和思想叫做单例设计模式
 
 
 单例设计模式的实现流程
        • 私有化构造方法，使用private关键字修饰。

        • 声明本类类型的引用指向本类类型的对象，并使用private static关键字共同修饰。

        • 提供公有的get方法负责将对象返回出去，并使用public static关键字共同修饰。
        
        • 单例设计模式的实现方式有两种：饿汉式 和 懒汉式，在以后的开发中推荐饿汉式。

          饿汉式：上来就创建实例；懒汉式：有需要再创建实例
 
 
继承
        • 子类不能继承父类的构造方法和私有方法，但私有成员变量可以被继承只是不能直接访问。

        • 无论使用何种方式构造子类的对象时都会自动调用父类的无参构造方法，来初始化从父类中继承的成员变量，相当于在构造方法的第一行增加代码super()的效果。
 
方法重写
        从父类中继承下来的方法不满足子类的需求时，就需要在子类中重新写一个和父类一样的方法来覆盖从父类中继承下来的版本，该方式就叫做方法的重写（Override）
      
      
方法重写的原则

        • 要求方法名相同、参数列表相同以及返回值类型相同，从Java5开始允许返回子类类型。（即父类的方法会的的是父类的类型，则子类重写该方法时可以返回父类类型或是子类类型）

        • 要求方法的访问权限不能变小，可以相同或者变大。   
        
        
        
     
访问控制符        访问权限       本类          本包的其他类        子类        其他包的其他类
————————              ————————              ——————————                     —————————                            ————

public          公有的             ok              ok              ok                  ok

protected       保护的             ok              ok               ok                  no

啥也不写         默认的            ok               ok               no                  no

private          私有的            ok               no               no                  no



final关键字
        
          使用final关键字修饰类表示该类不能被继承
          使用final关键字修饰成员方法表示该方法不能被重写
          使用final关键字修饰成员变量表示该成员变量必须初始化而且不能更改
    

多态
          多态主要指同一种事物表现出来的多种形态
            父类类型 引用名 = new 子类类型（）；

            ***父类对象可以直接指向子类的对象
            
            
抽象类

            指不能具体实例化的类并且使用abstract关键字修饰，也就是不能创建对象
            
抽象类和抽象方法
            • 抽象类中可以有成员变量、构造方法、成员方法；

            • 抽象类中可以没有抽象方法，也可以有抽象方法；

            • 拥有抽象方法的类必须是抽象类
            
            
接口
            • 接口就是一种比抽象类还抽象的类，体现在所有方法都为抽象方法。

            • 定义类的关键字是class，而定义接口的关键字是interface

            
            抽象类和接口的主要区别
            • 定义抽象类的关键字是abstract class，而定义接口的关键字是interface。

            • 继承抽象类的关键字是extends，而实现接口的关键字是implements。

            • 继承抽象类支持单继承，而实现接口支持多实现。

            • 抽象类中可以有构造方法，而接口中不可以有构造方法。

            • 抽象类中可以有成员变量，而接口中只可以有常量。
            
            
内部类
            当一个类的定义出现在另外一个类的类体中时，那么这个类叫做内部类 （Inner），而这个内部类所在的类叫做外部类（Outer）
      • 普通内部类 - 直接将一个类的定义放在另外一个类的类体中。

      • 静态内部类 - 使用static关键字修饰的内部类，隶属于类层级。
      • 局部内部类 - 直接将一个类的定义放在方法体的内部时。
      • 匿名内部类 - 就是指没有名字的内部类。
      
      
内部类的使用方式
        • 普通内部类和普通类一样可以定义成员变量、成员方法以及构造方法等。

        • 普通内部类和普通类一样可以使用final或者abstract关键字修饰。

        • 普通内部类还可以使用private或protected关键字进行修饰。

        • 普通内部类需要使用外部类对象来创建对象。

        • 如果内部类访问外部类中与本类内部同名的成员变量或方法时，需要使用this关键字。
        、

枚举
        • 使用public static final表示的常量描述较为繁琐，使用enum关键字来定

          义枚举类型取代常量，枚举类型是从Java5开始增加的一种引用数据类型。

        • 枚举值就是当前类的类型，也就是指向本类的对象，默认使用public static final关键字共同修饰，因此采用枚举类型.的方式调用。

        • 枚举类可以自定义构造方法，但是构造方法的修饰符必须是private，默 认也是私有的。

        静态内部类的格式

  
    
