一、HTML
HTML语法

特点 HTML文件不需要编译，直接使用浏览器阅读即可 HTML文件的
扩展名是*.html 或 *.htm
HTML结构都是由标签组成
标签名预先定义好的，我们只需要了解其功能即可。
标签名不区分大小写 <A name="属性值" age="18" >标签体</a>
通常情况下标签由开始标签和结束标签组成。例如： <a 属性名="属性值" href="01_html">标签体</a>
如果没有结束标签，建议以/结尾。例如： <img />
 

基本标签
1.标题标签

 

HTML提供 <hn> 系列标签，用于修饰标题，包含： <h1>、<h2>、<h3>、<h4>、<h5>、<h6> 。 <h1> 定义最大的标

题。 <h6> 定义最小的标题
特点:

       1. 加了标题的文字会变的加粗，字号也会依次变大。

       2. 一个标题独占一行。

2.段落标签

<p></p> 标签会自动在其前后创建一些空白。
               标签语义：可以把 HTML 文档分割为若干段落

换行标签<br>
       在 HTML 中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后才自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 ,<br> 标签插入一个简单的换行符。

                         标签语义：强制换行。
                  特点：

                    1. 是个单标签。

                    2. 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。

3. 字体标签

<font> 规定文本的字体、字体尺寸、字体颜色。

 
4.文本格式化标签

为文字设置粗体、 斜体 或下划线等效果，这时就需要用到 HTML 中的文本格式化标签，使 文字以特殊的方式显示。

5.图片标签

在 HTML 标签中， 标签用于定义 HTML 页面中的图像。<img src="url" alt="some_text">

6.列表标签
<!--列表标签-->
<ul type="circle"> <!--以“空心圆”显示无序列表-->
<li>无序</li>
<li>无序</li>
<li>无序</li>
</ul>
<ol type="I"> <!--以大写阿拉伯数字显示序号-->
<li>有序</li>
<li>有序</li>
<li>有序</li>
</ol>

7.超链接标签
在 HTML 标签中， 标签用于定义超链接，作用是从一个页面链接到另一个页面
<a href="跳转目标" target="目标窗口的弹出方式"> 文本或图像 </a>

8. 表格标签

1）表格标签作用

表格主要用于显示、 展示数据，因为它可以让数据显示的非常的规整，可读性非常好。特别是后台展示数据的时候，能够熟练运用表格就显得很重要。

HTML表格由 <table> 标签以及一个或多个 <tr>、<th> 或 <td> 标签组成。

<tr> 元素定义表格行，<th> 元素定义表头，<td> 元素定义表格单元。

2）合并单元格

把多个单元格合并为一个单元格, 这里同学们会最简单的合并单元格即可 。

合并单元格方式：

跨行合并：rowspan="合并单元格的个数"

跨列合并：colspan="合并单元格的个数"

3）合并方式

合并单元格三步曲：

1. 先确定是跨行还是跨列合并。
2. 找到目标单元格. 写上合并方式 = 合并的单元格数量。比
如：<td colspan=“2” ></td>。
3. 删除多余的单元格。


二、表单相关标签
1.什么是表单及作用

使用表单目的是为了收集用户信息。 在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时就需要表单。

2.表单的组成

一个完整的表单通常由表单域、表单控件（也称为表单元素）和提示信息3个部分构成。


3.表单的标签

表单域是一个包含表单元素的区域。 在 HTML 标签中，标签用于定义表单域，以实现用户信息的收集和传递。 会把它范围内的表单元素信息提交给服务器.

<form action="url地址" method="提交方式" name="表单域名称">
各种表单元素控件
</form>



三、div + css  
1. 什么是div

div就是html一个普通标签，进行区域划分。

特性：独自占一行。独自不能实现复杂效果。必须结合CSS样式进行渲染。

块标签: 1)行级元素:div 2) 行内元素:span

2.CSS介绍

CSS 是层叠样式表 ( Cascading Style Sheets ) 的简称.有时我们也会称之为 CSS 样式表或级联样式表。 CSS 是也是一种标记语言CSS 主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。 CSS 让我们的网页更加丰富多彩，布局更加灵活自如。简单理解：CSS 可以美化 HTML , 让 HTML 更漂亮， 让页面布局更简单。

CSS (Cascading Style Sheets) ：指层叠样式表
样式：给HTML标签添加需要显示的效果。
层叠：使用不同的添加方式，给同一个HTML标签添加样式，最后所有的样式都叠加到一起，共同作用于该标签。
选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式
属性和属性值以“键值对”的形式出现
属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等
属性和属性值之间用英文“:”分开
多个“键值对”之间用英文“;”进行区分
 注意事项:

CSS样式“选择器”严格区分大小写，“属性”和“属性值”不区分大小写。

多个属性之间必须用英文状态下的分号隔开，最后一个属性后的分号可以省略，但是，为了便于增加新样式最好保留。

如果属性的值由多个单词组成且中间包含空格，则必须为这个属性值加上英文状态下的引号。
p { font-family:"Times New Roman";}

在编写CSS代码时，为了提高代码的可读性，通常会加上CSS注释，例如：

/* 这是CSS注释文本,此文本不会显示在浏览器窗口中 */
属性的值和单位之间是不允许出现空格的，否则浏览器解析时会出错。例如，下面这行代码就是不正确的。

h1{ font-size:20 px; } /* 20和单位px之间有空格 这样是不正确的*/
4.引入css样式

CSS使用非常灵活，及可以嵌入在HTML文档中，也可以是一个单独的文件，如果是单独的文件，则必须以.css为扩展名。CSS和HTML的结合3种常用方式：

1. 行内样式

行内样式，是通过标签的style属性来设置元素的样式。

<a style="color: #f00; font-size: 30px;">拉勾教育</a>
2.内部样式

内部样式又称为内嵌式，是将CSS代码集中写在HTML文档的head头部标签体中，并且使用style标签定义。

给当前html文件中的多个标签设置样式。

在html的head标签中使用style标签来定义CSS

<style type="text/css"> body{background-color: #ddd; } </style>
内嵌式CSS样式只对其所在的HTML页面有效，可以对多处标签统一设置样式，因此，仅设计一个页面时，使用内嵌式是个不错的选择。但如果是一个网站，不建议使用这种方式，因为他不能充分发挥CSS代码的重用优势。

3.外部样式

外部样式又称为链入式，是将所有的样式放在一个或多个以.css为扩展名的外部样式表文件中，通过link标签将样式连接到HTML文档中。

<!--方式3：外部样式
rel="stylesheet" ,固定值，当前文件和引入文件的关系,rel是relationship的缩写，stylesheet是样式表
type="text/css", 固定值，表示浏览器解析方式
href ，表示css文件位置
font-family 表示使用的字体系列，多个字体使用逗号分隔。例如：“字体1,字体2,字体3”，此时优先使用“字体1”，如
果“字体1”系统不存在，再使用“字体2”，以此类推。
-->
<link rel="stylesheet" type="text/css" href="css/demo00.css"/>
链入式最大的好处是同一个CSS样式表可以被不同的HTML页面链接使用，同时一个HTML页面也可以通过多个link标记链接多个CSS样式表。

三种样式的优先级

行内样式>内部样式|外部样式(谁写在后边,使用谁,后边的会覆盖前边的)
5. 选择器

要想将CSS样式应用于特定的HTML元素，首先需要找到该目标元素。在CSS中，执行这一任务的样式规则部分被称为选择器，本小节将对CSS基础选择器进行详细地讲解，具体如下：

1) 元素选择器

标记选择器是指用HTML标记名称作为选择器，按标记名称分类，为页面中某一类标记指定统一的CSS样式。其基本语法格式如下：

标记名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }

2) ID选择器

id选择器使用“#”进行标识，后面紧跟id名，其基本语法格式如下：

#id名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }

3) 类选择器

类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：

.类名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }

4)派生选择器

派生选择器允许你根据文档的上下文关系来确定某个标签的样式。通过合理地使用派生选择 器，我们可以使 HTML代码变得更加整洁。 比方说，你希望列表中的li标签下 strong 元素变为斜体字，而不是通常的粗体字，可以这 样定义一个派生选择器：

li strong{font-style: italic;font-width: normal;}

6. CSS样式

1) 边框

CSS边框属性允许你指定一个元素边框的样式和颜色。

边框就是给html选中的元素设置边线.

属性:

border-style : 设置线条的样式 (dotted 点状线条 ; dashed 虚线 ; solid 单实线 ; double 双实线)

border-width : 设置线条的粗细 (10px ; 20px)

border-color : 设置线条颜色

简写版:

border : 1px solid red; (推荐)


HTML提供丰富的标签，这些标签被定义成了不同的类型，一般分为：行级元素和行内标签。

行级元素：以区域块方式出现。每个块标签独自占据一整行或多整行。

常见的块元素： <h1>、<div> 等
行内元素：不必在新的一行开始，同时也不强迫其他元素在新的一行显示。

常见的行内元素： <span>、<a> 等
在开发中，希望行内元素具有块元素的特性或者行内元素具有块元素的特性，可以使用display进行转换

选择器{display:属性值}

常用的属性值：

inline：此元素将显示为行内元素（行内元素默认的display属性值）

block：此元素将显为块元素（块元素默认的display属性值）

none：此元素将被隐藏，不显示，也不占用页面空间。


背景色：background-color

布局：float、clear

通常默认的排版方式，将页面中的元素从上到下一一罗列，而实际开发中，需要左右方式进行排版，就需要使用浮动

选择器{float:属性值;} 


CSS的盒子模型

什么是盒子模型： CSS 框模型 (Box Model) 规定了元素框处理元素内容、内边距、边框 和 外边距 的方式。



四、JavaScript
1 JavaScript 的概述
1) 什么是JavaScript

JavaScript是现在网络上比较流行的一种脚本语言，通过javaScript可以让用户与Web 站点之间增强交互。

JavaScript可以被所有Web浏览器解析。

什么是脚本语言:脚本语言叫做动态语言，它是一种解释型语言，它一般由文本编辑器编辑。脚本语言，一般它不能单独运行，需要嵌入到其它语言中，例如：javaScript， 我们可以将编写的javaScript嵌入到HTML代码中，由浏览器解析执行它。

2) javaScript的应用场景

数据可视化

数据可视化是当下大家所推崇的一种互动展示模式，而JavaScript拥有ECharts、D3.js等多种可实现数据可视化效果的框架。

移动应用

PhoneGap将WebVieW带向了移动应用，同时也将JavaScript带向了移动应用。

服务端

因为V8的性能将JavaScript带到了一个新的高度，于是Node.js诞生了——前端、后台都可以用JavaScript，现在任何一个网页都离不开JavaScript。

VR

利用3D游戏引擎，如Three.js.

游戏

JavaScript也可以做出华丽的特效!

3) JavaScript的组成

ECMAScript：描述了该语言的语法、语句和基本对象。

BOM:浏览器对象. 描述处理网页内容的方法和接口。

DOM:Document Object Model.操作文档中的元素和内容.

4) JavaScript的引入

在HTML文件中引入JavaScript有两种方式，一种是在HTML文档直接嵌入JavaScript脚本，称为内嵌式，另一种是链接外部JavaScript脚本文件，称为外联式。对他们的具体讲解如下：

1.内嵌式，在HTML文档中，通过script标签引入，

语法如下

<script type="text/javascript"> //此处为JavaScript代码 </script>
2.外联式，在HTML文档中，通过script标签引入.js文件

语法如下:

<script src="1.js" type="text/javascript" ></script>
2 基本语法

1) 变量

1. 在使用JavaScript时，需要遵循以下命名规范：

变量名必须以字母或下划线开头，数字不能开头
变量名不能包含特殊符号 (如:空格等符号 )
变量名不能使用JavaScript关键字作为变量名，如：function
JavaScript严格区分大小写。
2. 变量的声明

var 变量名; //JavaScript变量可以不声明，直接使用。默认值：undefined
3.变量的赋值

var 变量名 = 值; //JavaScript变量是弱类型，及同一个变量可以存放不同类型的数据
2) 数据类型

基本类型

undefifined：undefifined类型只有一个值，即 undefifined。当声明的变量未初始化时，该变量的默认值是 undefifined
boolean，有两个值 true 和 false
number，表示任意数字
string，字符串由双引号（"）或单引号（'）声明的。JavaScript 没有字符类型
关键字:typeof 可以查看变量的数据类型 typeof(变量)；

引用类型

引用类型通常叫做类（class），也就是说，遇到引用值，所处理的就是对象。
JavaScript是基于对象而不是面向对象。
JavaScript提供众多预定义引用类型（内置对象）。
造一个对象：var obj = new Object();
造一个字符串对象：var str = new String();
造一个日期对象：var date = new Date();逻辑运算符
3) 运算符

JavaScript运算符与Java运算符基本一致。


函数（重要）

js的函数是js非常重要的组成部分，js最常用的函数的定义方式有两种：

1.普通函数：

//定义函数
function 函数名(参数列表){
   js逻辑代码
  //return 返回值，若不需要返回值可以省略return
}
//函数调用：函数名(实际参数);
2.匿名函数：

匿名函数没有办法直接调用，使用场景： 将匿名函数赋值给一个变量，使用变量调用函数

//定义函数并赋值给变量： 
var fn = function(参数列表){ 
    js逻辑代码 
}
//调用函数：
fn(实际参数);
7) 事件（重要）

1 事件概述

js的事件是js不可或缺的组成部分，要学习js的事件，必须要理解如下几个概念：

1. 事件源：被监听的html元素
2. 事件：某类动作，例如点击事件，移入移除事件，敲击键盘事件等
3. 事件与事件源的绑定：在事件源上注册上某事件
4. 事件触发后的响应行为：事件触发后需要执行的代码，一般使用函数进行封装

事件绑定函数

给页面上的标签添加一个事件,关联一个函数. 当我们操作这个标签是,javaScript就会侦听到对应的事件发生,从而执行关联的函数我们称为事件绑定函数.

需求:
写一个表单，并绑定onsubmit事件，阻止提交
 
1.在页面上给定2个按钮,第一个按钮绑定单击事件; 第二个按钮绑定双击事件 (关联函数)
2.在页面上写一个input type=text 文本框; 绑定一个 光标失去事件
3.在页面上写一个input type=text 文本框; 绑定一个 获取光标事件
4.编写一个下拉框,绑定一个 onchange 内容改变事件
5.写div ,设置宽度和高度边框; onmouseenter 鼠标进入事件 ; onmousedown 某个鼠标按键被按下 ;
onmouseup 某个鼠标按键被松开 ; onmouseout 鼠标从某元素移开-->
<form  action="tableSelf.html"  method="post" onsubmit="return canjump(this)">
    <input type="text" name="name" value="名字" onblur="altertext('失去光标')">
    <input type="text" name="age" value="年龄" onfocus="altertext('获得光标')">
    <input type="button" onclick="altertext('button1')">
    <input type="button" ondblclick="altertext('button2')">
    <select onchange="altertext('我改变了')">
        <option>a</option>
        <option>b</option>
        <option>c</option>
    </select>
    <div style="width:20px;height:20px;background-color: red"
         onmouseenter="altertext('鼠标进入事件')"
         onmousedown="altertext('某个鼠标按键被按下 ')"
         onmouseup="altertext('某个鼠标按键被松开')"
         onmouseout="altertext('鼠标从某元素移开')"></div>
 
    <input type="submit" >
</form>
 
 
 
 
<script type="text/javascript">
    // window.onload=function (e) {
    //     alert(e);
    // }
    function canjump(e){
        console.log(e);
        return false;
    }
    function altertext(str) {
        console.log(str);
 
    }
 
</script>
4 派发事件

不修改html, 通过js方式获取到一个html中的元素对象,并且给它动态的设置一个事件并关联一个函数.我们称为事件派发.

派发的好处是:不污染原来的html代码; 不好处是:需要页面内容加载完毕在可以使用,一般写在页面加载函数中

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title></title>
    <script>
        //1.事件派发,给button派发一个单机事件,关联一个函数
        //alert(document.getElementById("btn"));
        //2.页面加载函数
        //作用:当整个html页面全部加载完毕之后,自动执行的函数
        //格式 :window.onload = function(){ }
        //页面加载
        window.onload = function(){
//派发事件
            document.getElementById("btn").onclick = function(){
                alert("点我干嘛!");
            }
        }
    </script>
</head>
<body>
<input type="button" id="btn" value="点我啊" />
</body>
</html>


五、BOM对象 
1. js 的 BOM 概述
BOM（Browser Object Model），浏览器对象模型(将客户端的浏览器抽象成一类对象)，是将我们使用的浏览器抽象成对象模型，例如我们打开一个浏览器，会呈现出以下页面，通过js提供浏览器对象模型对象我们可以模拟浏览器功能。

例如，在浏览器地址栏输入地址，敲击回车这个过程，我们可以使用location对象进行模拟。在例如，浏览器中的前进和后退按钮，我们可以使用history对象模拟。当然除此之外，BOM对象不仅仅具备这些功能，让我们来学习吧。

2. js 的 BOM 对象
1. Screen对象，Screen 对象中存放着有关显示浏览器屏幕的信息。

2. Navigator对象，包含的属性描述了正在使用的浏览器

3. Window对象（重点），Window 对象表示一个浏览器窗口或一个框架。

4. History对象，其实就是来保存浏览器历史记录信息。

5. Location对象（重点），Location 对象是 Window 对象的一个部分，可通过 window.location 属性来访问。

3. Window 对象
Window对象此处学习它的三个作用：

1. 获取文档对象document

2. 弹框的方法

3. 定时器

Location对象（重点）

重点记忆location.href可以在js中进行url访问

location.href 相当于在浏览器的地址栏中输入地址 并敲回车
location.reload() ; 让页面重新加载(刷新页面)
代码实现

function goTo(){ 
    //该行代码执行就相当与在浏览器地址栏输入地址,按回车 
    location.href="http://www.taobao.com"; 
}
function refresh(){ 
    //整合html页面被加载,页面刷新 
    location.reload(); 


六、DOM对象
1. 什么是 DOM
DOM：Document Object Model 文档对象模型，定义访问和操作结构化文档（HTML）的方式。

创建的结构化文档：html、xml 等

DOM包括：核心DOM、HTML DOM、XML DOM。通常情况下HTML DOM 和XML DOM是可以相互使 用的。

HTML DOM 将 整个HTML文档呈现成一颗DOM树，树中有元素、属性、文本等成员。

ocument 文档对象

浏览器加载整个HTML文档形成Document 对象，Document 对象可以访问和操作HTML文档中的所有元素。


七、JavaScript内置对象  
JS 的对象也分为内置对象和定义对象
例如: String 、 Array 、 Date 、Math、Random

1. JS 内置对象 String
String 对象用于处理文本（字符串）

2. JS 内置对象 Array
Array 对象，就是JS数组，用于存储多个值，存储的元素类型可以是任意类型。

创建 Array 对象的语法

new Array();
new Array(size);
new Array(element0, element0, ..., elementn);
参数

参数 size 是期望的数组元素个数。返回的数组，length 字段将被设为 size 的值。

参数 element ..., elementn 是参数列表。当使用这些参数来调用构造函数 Array() 时，新创建的数组的元素就会被初始化为这些值。它的 length 字段也会被设置为参数的个数。

 


八、jQuery基本概念
jQuery 基本概念
jQuery是一个javascript库，jQuery凭借着简洁的语法和跨平台的兼容性，极大的简化了js操作DOM、处理事件、执行动画等操作。jQuery强调的理念是：'write less, do more'(写的少，做的多)。

官网下载地址：http://jquery.com/download

进不去可以去http://www.jq22.com/jquery-info122

jQuery 初体验
 
jQuery 对象 和 DOM 对象
1)DOM对象

DOM ( Document Object Model ，文档对象模型)，每一份 DOM 都可以表示成一棵树。

在 js 中，通过 getElementByTagName 或者 getElementById 来获取元素节点。像这样得到的 DOM 元素就是 DOM 对象。而且 DOM 对象可以使用 js 中的方法，如： innerHTML。

var domObj = document.getElementById('id'); 
// 获得DOM对象 
var objHTML = domObj.innerHTML; 
// 使用Javascript中的属性-innerHTML
2)jQuery对象

jQuery 对象，是通过 jQuery 包装 DOM 对象后产生的对象， jQuery 对象是 jQuery 独有的，它可以使用 jQuery里面的方法。

// 获取id为test的元素内的html代码
$('#test').html(); // .html()是jQ里面的方法
上面的代码等同于：
document.getElementById('test').innerHTML;
3)注意事项

在jQuery中，无法使用任何DOM对象的方法，例如：$('id').innerHTML，这是错误的写法。
在js中也无法使用jQ对象里面的方法，例如：document.getElementById('id').html()，这样也是错误的。
jQuery 对象与 DOM 对象转换
jQ对象转成DOM对象：

方法一(常用)： [index]

var $test = $("#test"); // jQ获取到的对象
var node = $test[0]; // 转成DOM对象
node.innerHTML = "你好啊"; // 使用DOM对象的方法
方法二： get(index)

var $test = $('#test'); // jQ获取到的对象
var test = $test.get(0); // 转成DOM对象
test.innerHTML = "我来了"; // 使用DOM对象的方法
dom对象转成jQuery对象：

用 $() 把 DOM 对象包裹起来就是一个 jQ 对象了

var test = document.getElementById("test"); // 获取的DOM对象
var $test = $(test); // 转成jQ对象
 


九、jQuery的函数与事件 
1. 页面加载
Js页面加载方式   Window.onload = function(){ }

jQuery页面加载方式

格式1: $(function(){ })
格式2: $(document).ready(function(){ })
结论: javaScript的页面加载只执行一次,最后一次加载的执行; jQuery的页面加载执行多次,每次都执行

2. 事件绑定与事件派发
1)jQuery中常用事件

jQuery中的事件与javaScript中的事件用法一样,但是名称都去掉了on.


2)元素绑定事件

<input type="button" value="点我试试" id="btn1" onclick="fn()">
function fn(){
    alert("试试就试试!!");
}
3)元素派发事件

<head>
    <script>
        $(function(){
            $("#btn2").click(function(){
                alert("jQuery想试试");
            })
        })
    </script>
</head>
 
<input type="button" value="点我试试" id="btn2">



十、jQuery的遍历 
1 原始方式遍历
语法

for(var i=0;i<元素数组.length;i++){ 
    元素数组[i]; 
}
2 jquery 对象方法遍历
语法

jquery对象.each(function(index,element){});
其中，
index:就是元素在集合中的索引
element：就是集合中的每一个元素对象
 
<body>
<script type="text/javascript">
    $(function(){
        var $lis = $("#city li");
        $lis.each(function(index,element){
            alert(index+"--"+$(element).html());
        });
    });
</script>
 
<ul id="city">
    <li>北京</li>
    <li>上海</li>
    <li>天津</li>
    <li>重庆</li>
</ul>
</body>
 
3 jquery 的全局方法遍历
语法

$.each(jquery对象,function(index,element){}); 
其中， index:就是元素在集合中的索引 
element：就是集合中的每一个元素对象
 
var $lis = $("#city li");
$.each($lis,function(index,element){
     alert(index+"--"+$(element).html());
});
4 jQuery3.0 新特性 for of 语句遍历
语法

for(变量 of jquery对象){ 
    变量； 
}
其中， 变量:定义变量依次接受jquery数组中的每一个元素 
jquery对象：要被遍历的jquery对象
 
 
var $lis = $("#city li"); 
for(li of $lis){ 
    alert($(li).html()); 
}



十一、jQuery动画
jQuery 可以通过方法对 HTML元素进行效果设置： 隐藏，显示，切换，滑动，淡入淡出，动画等设置

1、链式编程
链是允许我们在同一个元素上在一条语句中运行多个jQuery方法，可以把动作/方法链接在 一起 ；这样的话，浏览 器就不必多次查找相同的元素。如需链接一个动作， 只需简单地把该动作追加到之前的动作上。 下面的例子把 css()、slideUp() 和 slideDown() 链接在一起。"p1" 元素首先会变为红 色，然后向上滑动，再然后向下滑动：

        $("#p1").css("background","red").slideUp(1000).slideDown(1000);

2、animate 自定义动画
animate() 方法用于创建自定义动画。

语法:

$(selector).animate({params},speed,callback);



十二、ajax概述  
1. ajax 概念
Ajax 即"Asynchronous Javascript And XML"（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。

2. ajax 功能
Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。提升用户的体验。

3. AJAX 的应用场景
数据校验

按照需求获取数据

自动更新页面内容

4. 同步与异步
两种方式的区别主要体现在客户端和服务器端相互通信的基础上。

同步方式：客户端必须等待服务器端的响应，在等待的期间客户端不能做其他操作。
异步方式：客户端不需要等待服务器端的响应，在服务器处理请求的过程中，客户端可以进行其他的操作。




十三、js原生的ajax 
1. 原生的 ajax 的开发步骤
1）创建Ajax引擎对象

2）为Ajax引擎对象绑定监听（监听服务器已将数据响应给引擎）

3）绑定提交地址

4）发送请求

5）接受响应数据

2 js原生的ajax的代码实现

IDEA配置tomcat   https://www.cnblogs.com/Knowledge-has-no-limit/p/7240585.html

新建一个模块，javaee的，勾选web application



十四、jQuery方式的ajax 
1 jQuery 方式 ajax 简介
jquery是一个优秀的js类库，自然对js原生的ajax进行了封装，封装后的ajax的操 作方法更简洁，功能更强大

2 GET 请求方式
概述

通过远程 HTTP GET 请求载入信息。这是一个简单的 GET 请求功能，如需复杂的ajax参数设置请使用$.ajax。

语法

$.get(url, [data], [callback], [type])


3 POST 请求方式
概述

通过远程 HTTP POST 请求载入信息。这是一个简单的 POST 请求功能，如需复杂的ajax参数设置请使用$.ajax。

语法

$.post(url, [data], [callback], [type])


4 AJAX 请求方式
概述

通过 HTTP 请求加载远程数据。jQuery 底层 AJAX 实现。简单易用的高层实现见get和post方法。$.ajax()方法可以更加详细的设置底层的参数。

语法

$.ajax([settings])


十五、 json数据格式
1. json的概念

json的全称叫做：JavaScript object Notation，JavaScript对象表示法。

json现在主要的功能是：用于存储和交换文本信息的语法，进行数据的传输。

json的主要优点：JSON 比 XML 更小、更快、更易解析。

2.json的转换工具

1 ) json转换工具的概述

json的转换工具是通过java封装好的一些jar工具包，直接将java对象或集合转换成json格式的字符串。



3 ) jackson工具使用

1）导入json相关jar包

https://www.cnblogs.com/yinghuapiaoluo/p/12593389.html

jackson-annotations-2.2.3.jar
jackson-core-2.2.3.jar
jackson-databind-2.2.3.jar
2）创建java对象或集合

3) 使用jackson的ObjectMapper对象的writeValueAsString方法进行转换

4 ) 注解使用

@JsonIgnore:排除属性。

@JsonFormat:属性值的格式化,例如，针对日期格式：@JsonFormat(pattern = "yyyy-MM-dd")

5) 转换代码实现

public class jsonTest {
    public static void main(String[] args) throws JsonProcessingException {
        //创建User对象
        User user = new User("100","bigload",33);
 
        //创建List集合
        List<String> arr = new ArrayList<>();
        arr.add("aaa");
        arr.add("bbbb");
        arr.add("ccccc");
        //创建Map集合
        Map<String,User> map = new HashMap<>();
        map.put("user", user);
        //转换
        ObjectMapper om = new ObjectMapper();
        String userJson = om.writeValueAsString(user);
        String arrJson = om.writeValueAsString(arr);
        String mapJson = om.writeValueAsString(map);
        System.out.println(userJson);
        System.out.println(arrJson);
        System.out.println(mapJson);
 
    }
}
 
class User implements Serializable {
 
    private String id;
    private String name;
    private int age;
 
    public User(String id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }
 
    public String getId() {
        return id;
    }
 
    public void setId(String id) {
        this.id = id;
    }
 
    public String getName() {
        return name;
    }
 
    public void setName(String name) {
        this.name = name;
    }
 
    public int getAge() {
        return age;
    }
 
    public void setAge(int age) {
        this.age = age;
    }
 
    
}



十六、Vue  
vue 快速入门 https://cn.vuejs.org/
1 ）入门案例
一共三个步骤

1. 引入vue.js库

2. 创建Vue对象设置el属性和data属性

3. 使用插值表达式将数据渲染到html页面

 
2 ）插值表达式
数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值，Mustache 标签将会被替代为对应数据对象上属性的值。无论何时，绑定的数据对象上属性发生了改变，插值处的内容都会更新。 Vue.js 都提供了完全的JavaScript 表达式支持。

{{ dataNum + 1 }}
{{ true ? 'YES' : 'NO' }}
这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个 表达式，所以下面的例子都不会生效。
<!-- 这是语句，不是表达式 -->
{{ var a = 1 }}
<!-- 流控制也不会生效，请使用三元表达式 -->
{{ if (ok) { return message } }}
3 ） el 挂载

message中的内容会替代插值表达式{{message}}中的内容.

注意事项:
1.Vue管理的el选项命中元素及其子元素都有作用。 比如: id为app的div外使用{{message}} 不能解析,但在内部使用{{message}}可以解析。

2.除了id选择器其他的选择器也可以使用

3.html和body标签上不能挂使用el挂在。

4) data 数据对象
当一个 Vue 实例被创建时，它将 data 对象中的所有的 property 加入到 Vue 的响应式系统中。当这些 property 的值发生改变时，视图将会产生“响应”，即匹配更新为新的值

Vue 常用指令
 
v-text 和 v-html
很像innerText和innerHTML

v-text:更新标签中的内容

v-text和插值表达式的区别
                   v-text 更新整个标签中的内容

                   插值表达式: 更新标签中局部的内容

v-html:更新标签中的内容/标签

可以渲染内容中的HTML标签
注意:尽量避免使用，容易造成危险 (XSS跨站脚本攻击)


v-if 和 v-show
作用:根据表达式的bool值进行判断是否渲染该元素
        <div id="app">
            <!-- 如果isShow的值是true ,就显示p标签 -->
            <p v-if="isShow">我是p标签中的内容</p>
            <p v-show="isShow">我是p标签中的内容</p>
            <!-- 如果标签显示与隐藏切换频繁, 就使用v-show
            v-show本质是通过修改标签的display值
            -->
        </div>
        <script src="./vue.js"></script>
        <script>
            new Vue({
                el: '#app',
                data: {
                    isShow: false
                }
            });
        </script>
v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。

因此，如果需要非常频繁地切换，则使用 v-show 较好；

如果在运行时条件很少改变，则使用 v-if 较好。

v-on
作用:使用 v-on 指令绑定 DOM 事件，并在事件被触发时执行一些 JavaScript 代码。

语法: @事件名.修饰符 = "methods中的方法名"

注意: $event 可以传形参


修饰符

语法:

格式1: v-on:事件名称.修饰符 = "函数名称"

简写: @事件名.修饰符 = "methods中的方法名"

 

按键别名:
.enter

.tab

.delete

.esc

.space

.up

.down

.left

.right

.ctrl

.alt

.shift

v-for
根据一组数组或对象的选项列表进行渲染。

v-for 指令需要使用 item in items 形式的特殊语法，

items 是源数据数组 /对象

当要渲染相似的标签结构时用v-for

v-bind
作用: 可以绑定标签上的任何属性。

绑定src和alt属性


绑定 class 类名
对象语法和数组语法

对象语法

如果isActive为true，则返回的结果为 <div class="active"></div>


数组语法

渲染的结果 <div class="active text-danger"></div>

<!-- 可以简化为 :，简化语法更常用 -->

<div :class="{active: isActive}">

v-model
作用: 获取和设置表单元素的值(双向数据绑定)

特点: 双向数据绑定

数据发生变化可以更新到界面

通过界面可以更改数据

案例:获取和设置表单元素的值(双向数据绑定)



十七、vue生命周期 
1. 什么是 vue 的生命周期
vue的生命周期是指从Vue实例创建、运行到销毁期间伴随的这些事件，这些事件对应的函数记录着vue对象的整个生命周期。

2.Vue 实例的产生过程
1. beforeCreate 在实例初始化之后，数据观测和事件配置之前被调用。

2. created 在实例创建完成后被立即调用。

3. beforeMount 在挂载开始之前被调用。

4. mounted el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。

5. beforeUpdate 数据更新时调用，发生在虚拟DOM打补丁之前。

6. updated 由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。

7. beforeDestroy 实例销毁之前调用。

8. destroyed 实例销毁后调用。


十八、axios异步访问 
1.axios 介绍
VUE中结合网络数据进行应用的开发

目前十分流行网络请求库,专门用来发送请求,其内部还是ajax,进行封装之后使用更加方便

axios作用: 在浏览器中可以帮助我们完成 ajax异步请求的发送.

2 axios 入门
使用步骤:
1.导包

<!-- 官网提供的 axios 在线地址 -->

<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

或者去github中下载源码

https://github.com/axios/axios

2.请求方式,以GET和POST举例

GET

格式1: axios.get(地址?key=value&key2=value2).then(function(response){},function(error){});

格式2: axios.get(地址,{params:{key1:value1...}}).then(function(response){},function(error){});

POST

axios.post(地址,{key:value,key2:value2}).then(function(response){},function(error){})


3.axios 总结
1. axios 必须导包才能使用

2. 使用get或者post方法,就可以发送请求

3. then方法中的回调函数,会在请求成功或者请求失败的时候触发

4. 通过回调函数的形参可以获取响应的内容,或者错误信息

4. 其他请求类型
axios.request(confifig)

axios.get(url[, confifig])

axios.delete(url[, confifig])

axios.head(url[, confifig])

axios.post(url[, data[, confifig]])

axios.put(url[, data[, confifig]])

axios.patch(url[, data[, confifig]])


十九、数据可视化 
数据可视化的作用：

1.可视化数据更直观，更容易理解

2.能够通过不同的维度，使用不同的方式展示数据。

3.与数据交互

4.建设性讨论结果

5.理解运营和结果之间的连接

可视化工具介绍


数据采集

一是数据从无到有产生的过程（服务器打印的 log、自定义采集的日志等） 叫做数据采集；

另一方面也有把通过使用 Flume 等工具把数据采集搬运到指定位置的这个 过程叫做数据采集

数据预处理

现实世界中数据大体上都是不完整，不一致的脏数据，无法直接进行数据 分析，或者说不利于分析。 为了提高数据分析的质量和便捷性产生了数据预处理 技术 .

数据预处理有多种方法：数据清理，数据集成，数据变换等。这些数据处理 技术在正式数据分析之前使用，大大提高了后续数据分析的质量与便捷，降低实 际分析所需要的时间 ; 使用 MapReduce 实现.

数据入库

预处理完的结构化数据通常会导入到 Hive 数据仓库中，建立相应的库和表 与之映射关联 。

入库过程有个更加专业的叫法—ETL。 ETL 是将业务系统的数据经 过抽取、清洗转换之后加载到数据仓库的过程，目的是将企业中的分散、零乱、 标准不统一的数据整合到一起，为企业的决策提供分析依据。

数据分析

根据需求使用 Hive SQL 分析语句，得出指标 各种统计结果

数据可视化

将分析所得数据结果进行数据可视化，一般通过图表进行展示数据

可视化可以帮你更容易的解释趋势和统计数据

系统的架构

1. 数据采集： 页面埋点 JavaScript 采集； 开源框架 Apache Flume

2. 数据预处理： Hadoop MapReduce 程序

3. 数据仓库技术：基于 hadoop 的数据仓库 Hive

4. 数据导出：基于 hadoop 的 sqoop 数据导入导出工具

5. 数据可视化：定制开发 web 程序(echarts)

6. 整个过程的流程调度： hadoop 生态圈中的 azkaban 工具


Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统 .

HDFS 分布式文件系统 ,是一个高度容错性的系统，适合部署在廉价的机器上。HDFS能提供高吞吐量的数据访问，非常适合大规模数据集上的应用

MapReduce是一种编程模型，用于大规模数据集（大于1TB）的并行运算

Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能。

Sqoop是一款开源的工具，主要用于在Hadoop(Hive)与传统的数据库(mysql)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle ,Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS 的数据导进到关系型数据库中

二十、HighCharts
1.HighCharts简介

Highcharts 系列软件包含 Highcharts JS，Highstock JS，Highmaps JS 共三款软件，均为纯 JavaScript 编写的 HTML5 图表库，全部源码开放，个人及非商业用途可以任意使用及源代码编辑。

Highcharts

Highcharts 是一个用纯 JavaScript 编写的一个图表库， 能够很简单便捷的在 Web 网站或是 Web 应用程序添加有交互性的图表，并且免费提供给个人学习、个人网站和非商业用途使用。

Highcharts 支持的图表类型有直线图、曲线图、区域图、柱状图、饼状图、散状点图、仪表图、气泡图、瀑布流图等多达 20 种图表，其中很多图表可以集成在同一个图形中形成混合图。

Highstock

Highstock 是用纯 JavaScript 编写的股票图表控件，可以开发股票走势或大数据量的时间轴图表。它包含多个高级导航组件：预设置数据时间范围，日期选择器、滚动条、平移、缩放功能。

3. Highmaps

Highmaps 是一款基于 HTML5 的优秀地图组件。

Highmaps 继承了 Highcharts 简单易用的特性，利用它可以方便快捷的创建用于展现销售、选举结果等其他与地理位置关系密切的交互性地图图表。

Highmaps 可以单独使用，也可以作为 Highcharts 的一个组件来使用


3. Highmaps

Highmaps 是一款基于 HTML5 的优秀地图组件。

Highmaps 继承了 Highcharts 简单易用的特性，利用它可以方便快捷的创建用于展现销售、选举结果等其他与地理位置关系密切的交互性地图图表。

Highmaps 可以单独使用，也可以作为 Highcharts 的一个组件来使用


基本使用
1) 基础使用
Highcharts 最基本的运行只需要一个 JS 文件，即 highcharts.js ，例如引入下面的文件即可创建基础的图表了。

<script src="http://cdn.highcharts.com.cn/highcharts/highcharts.js"></script>

2) 功能模块
功能模块是在 Highcharts 主要功能的基础做的扩展，是由官方发布的功能包，常用功能模块有：

更多图表类型扩展模块（ highcharts-more.js ）

3D 图表模块 （ highcharts-3d.js ）

导出功能模块（ modules/exporting.js ）

金字塔图表类型（ modules/funnel.js ）

钻取功能模块（ modules/drilldown.js ）

数据加载功能模块（ modules/data.js

3)Highstock 和 Highmaps
Highstock 和 Highmaps 是另外两款针对不同使用场景的图表产品，三款产品之间相互独立又有密切关系，他们关

系和混合使用的说明如下

Highcharts 基础图表
Highstock 股票及大数据量时间轴图表
Highmaps 地图
Highstock 是完全包含 Highcharts 的，是在 Highcharts 的基础上增加了更多高级功能；Highmaps 则完全独立， 不过我们提供了地图功能模块 map.js （在 Highmaps 资源包的 modules 目录）供 Highcharts 或 Highstock 调用。

3 ）混合使用（重要）
A. Highcharts + Highstock 时只需要引入 highstock.js

<script src="http://cdn.highcharts.com.cn/highstock/highstock.js"></script>

B. Highcharts + Highmaps 混合使用是需要 引入 highcharts.js + map.js

 

<script src="http://cdn.highcharts.com.cn/highcharts/highcharts.js"></script>

<script src="http://cdn.highcharts.com.cn/highmaps/modules/map.js"></script>

 

C. Highstock + Highmaps 或 Highcharts + Highstock + Highmaps 混合使用时需引入 highstock.js + map.js

 

<script src="http://cdn.highcharts.com.cn/highstock/highstock.js"></script>

<script src="http://cdn.highcharts.com.cn/highmaps/modules/map.js"></script>



二十一、图表主要组成
一般情况下，Highcharts 包含标题（Title）、坐标轴（Axis）、数据列（Series）、数据提示框（Tooltip）、图例（Legend）、版权标签（Credits）等，另外还可以包括导出功能按钮（Exporting）、标示线（PlotLines）、标示区域（PlotBands）、数据标签（dataLabels）等。

1. 标题（Title）
图表标题，包含标题和副标题（subTitle），其中副标题是非必须的。

2. 坐标轴（Axis）
坐标轴包含x轴（xAxis）和y轴（yAxis）。通常情况下，x轴显示在图表的底部，y轴显示在图表的左侧。多个数据列可以共同使用同一个坐标轴，为了对比或区分数据，Highcharts提供了多轴的支持。

3. 数据列（Series）
数据列即图表上一个或多个数据系列，比如曲线图中的一条曲线，柱状图中的一个柱形。

4. 数据提示框（Tooltip）
当鼠标悬停在某点上时，以框的形式提示该点的数据，比如该点的值、数据单位等。数据提示框内提示的信息完全可以通过格式化函数动态指定。

5. 图例（Legend）
图例是图表中用不同形状、颜色、文字等 标示不同数据列，通过点击标示可以显示或隐藏该数据列。

6. 版权标签（Credits）
显示在图表右下方的包含链接的文字，默认是Highcharts官网地址。通过指定credits.enabled=false即可不显示该信息。

7. 导出功能（Exporting）
通过引入 exporting.js即可增加图表导出为常见文件功能。

8. 标示线（PlotLines）
可以在图表上增加一条标示线，比如平均值线，最高值线等。

9. 标示区（PlotBands）
可以在图表添加不同颜色的区域带，标示出明显的范围区域。



二十二、ECharts
ECharts 简介
ECharts缩写来自Enterprise Charts，商业级数据图表，是百度的一个开源的使用JavaScript实现的数据可视化工具，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari 等），底层依赖轻量级的矢量图形库 ZRender，提供直观、交互丰富、可高度个性化定制的数据可视化图表。

官网：https://echarts.apache.org

下载地址：https://echarts.apache.org/zh/download.html

五分钟上手 ECharts
我们可以参考官方提供的5分钟上手ECharts文档感受一下ECharts的使用方式，地址如下：

https://echarts.apache.org/zh/tutorial.html#5%20%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%20ECharts

第一步：创建html页面并引入echarts.js文件

<script src="echarts.js"></script>

第二步：在页面中准备一个具备宽高的DOM容器。

<div id="main" style="width: 600px;height:400px;"></div>

第三步：通过echarts.init方法初始化一个 echarts 实例并通过setOption方法生成一个简单的柱状图

