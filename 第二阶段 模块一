一、MySQL基础&SQL入门
 

什么是数据库
1. 数据库(DataBase) 就是存储和管理数据的仓库

2. 其本质是一个文件系统, 还是以文件的方式,将数据保存在电脑上

为什么使用数据库
数据存储方式的比较

为什么选择MySQL ?

功能强大,足以应付web应用开发
开源, 免费
MySql 的目录结构
1) MySQL 安装目录
MySql的默认安装目录在 C:\Program Files\MySQL\MySQL Server 5.7

data< 目录 > Mysql 管理的数据库文件所在的目录
几个概念
数据库： 文件夹

表： 文件

数据： 文件中的记录

数据库管理系统
1) 什么是数据库管理系统 ?

数据库管理系统（DataBase Management System，DBMS）：指一种操作和管理维护数据库的大型软件。

MySQL就是一个 数据库管理系统软件, 安装了Mysql的电脑,我们叫它数据库服务器.

2) 数据库管理系统的作用

用于建立、使用和维护数据库，对数据库进行统一的管理。

3）数据库管理系统、数据库 和表之间的关系

MySQL中管理着很多数据库，在实际开发环境中 一个数据库一般对应了一个的应用，数据库当中保存着多张表，每一张表对应着不同的业务，表中保存着对应业务的数据。

数据库表
数据库中以表为组织单位存储数据表类似我们Java中的类,每个字段都有对应的数据类型

SQL( 重点 )
SQL 的概念
1） 什么是SQL ？

结构化查询语言(Structured Query Language)简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。

2） SQL 的作用

是所有关系型数据库的统一查询规范，不同的关系型数据库都支持SQL

所有的关系型数据库都可以使用SQL

不同数据库之间的SQL 有一些区别 方言

SQL 通用语法
1） SQL语句可以单行 或者 多行书写，以分号 结尾 ; （Sqlyog中可以不用写分号）

2） 可以使用空格和缩进来增加语句的可读性。

3） MySql中使用SQL不区分大小写，一般关键字大写，数据库名 表名列名 小写。


注意：MySQL中的 char类型与 varchar类型，都对应了 Java中的字符串类型，区别在于：

 char类型是固定长度的： 根据定义的字符串长度分配足够的空间。 

 varchar类型是可变长度的： 只使用字符串长度所需的空间

比如：保存字符串 "abc"

        x char(10) 占用10个字节 

        y varchar(10) 占用3个字节

适用场景：

 char类型适合存储 固定长度的字符串，比如 密码 ，性别一类

varchar类型适合存储 在一定范围内，有长度变化的字符串

创建表

语法格式：

      CREATE TABLE 表名(

            字段名称1 字段类型（长度），字段名称2 字段类型 注意 最后一列不要加逗号

      )；

快速创建一个表结构相同的表（复制表结构）

        语法格式: create table 新表明 like 旧表名
        
        
     修改表

1）修改表名

语法格式    rename table 旧表名 to 新表名

2) 修改表的字符集

语法格式 alter table 表名 character set 字符集

 
3）向表中添加列， 关键字 ADD 

语法格式：alert table 表名 add 字段名称 字段类型

4）修改表中列的 数据类型或长度 ， 关键字 MODIFY

 语法格式：alter table 表名 modify 字段名称 字段类型

5）修改列名称 , 关键字 CHANGE

 语法格式alter table 表名 change 旧列名 新列名 类型(长度);

6）删除列 ，关键字 DROP

语法格式alter table 表名 drop 列名;

7）查看表结构

语法格式DESC 表名

DML 操作表中数据

SQL中的DML 用于对表中的数据进行增删改操作

插入数据

        语法格式：insert into 表名 （字段名1，字段名2...） values(字段值1，字段值2...);
更改数据

语法格式1：不带条件的修改update 表名 set 列名 = 值，修改多个列名用逗号分隔

语法格式2：带条件的修改update 表名 set 列名 = 值 [where 条件表达式：字段名 = 值 ]

删除数据

语法格式1：删除所有数据

      delete from 表名

语法格式2： 指定条件 删除数据

      delete from 表名 [where 字段名 = 值]

如果要删除表中的所有数据,有两种做法

 

delete from 表名; 不推荐. 有多少条记录 就执行多少次删除操作. 效率低

truncate table 表名: 推荐. 先删除整张表, 然后再重新创建一张一模一样的表. 效率高

简单查询

 查询不会对数据库中的数据进行修改.只是一种显示数据的方式 SELECT

语法格式select 列名 from 表名

 别名查询，使用关键字 as

使用去重关键字 distinct

 运算查询 (查询结果参与运算)
        

二、MySQL单表&约束&事务 
 

DQL操作单表

排序

 通过 ORDER BY 子句,可以将查询出的结果进行排序(排序只是显示效果,不会影响真实数据)

ASC 表示升序排序(默认)

DESC 表示降序排序

语法结构SELECT 字段名 FROM 表名 [WHERE 字段 = 值] ORDER BY 字段名 [ASC / DESC]

排序方式

       1) 单列排序      只按照某一个字段进行排序, 就是单列排序

       2) 组合排序      同时对多个字段进行排序, 如果第一个字段相同 就按照第二个字段进行排序,以此类推

聚合函数

之前我们做的查询都是横向查询，它们都是根据条件一行一行的进行判断，而使用聚合函数查询是纵向查询，它是对某一列的值进行计算，然后返回一个单一的值(另外聚合函数会忽略null空值。)；

语法结构SELECT 聚合函数(字段名) FROM 表名;

分组

 分组查询指的是使用 GROUP BY 语句,对查询的信息进行分组,相同数据作为一组

语法格式 SELECT 分组字段/聚合函数 FROM 表名 GROUP BY 分组字段 [HAVING 条件];

注意:

        分组时可以查询要分组的字段, 或者使用聚合函数进行统计操作. * 查询其他字段没有意义

limit关键字

limit 关键字的作用： limit是限制的意思,用于 限制返回的查询结果的行数 (可以通过limit指定查询多少行数据)  limit 语法是 MySql的方言,用来完成分页

语法结构 SELECT 字段1,字段2... FROM 表名 LIMIT offset , length;

参数说明

oﬀset 起始行数, 从0开始记数, 如果省略 则默认为 0.

length 返回的行数

SQL约束
约束的作用:

对表中的数据进行进一步的限制，从而保证数据的正确性、有效性、完整性.

违反约束的不正确数据,将无法插入到表中
        
        
   哪些字段可以作为主键 ?

 通常针对业务去设计主键,每张表都设计一个主键id  

主键是给数据库和程序使用的,跟最终的客户无关,所以主键没有意义没有关系,只要能够保证不重复就好,比如 身份证就可以作为主键.

删除主键约束

语法格式ALTER TABLE 表明 DROP PRIMARY KEY;

主键的自增

        注: 主键如果让我们自己添加很有可能重复,我们通常希望在每次插入新记录时,数据库自动生成主键字段的值.

关键字:

AUTO_INCREMENT 表示自动增长(字段类型必须是整数类型)     
        
        修改主键自增的起始值

        默认地 AUTO_INCREMENT 的开始值是 1，如果希望修改起始值,请使用下面的方式，在括号后添加

创建主键自增的表,自定义自增其实值

CREATE TABLE emp2(

eid INT PRIMARY KEY AUTO_INCREMENT, ename VARCHAR(20),

sex CHAR(1) )AUTO_INCREMENT=100;

DELETE和TRUNCATE对自增长的影响      
        
        
主键约束与唯一约束的区别:

主键约束 唯一且不能够为空
唯一约束,唯一 但是可以为空
一个表中只能有一个主键 , 但是可以有多个唯一约束
外键约束

  FOREIGN KEY 表示外键约束

默认值

默认值约束 用来指定某列的默认值

语法格式 字段名 字段类型 DEFAULT 默认值        
        
        
三、数据库事务
什么是事务

事务是一个整体,由一条或者多条SQL 语句组成,这些SQL语句要么都执行成功,要么都执行失败, 只要有一条SQL出现异常,整个操作就会回滚,整个业务执行失败

比如: 银行的转账业务,张三给李四转账500元 , 至少要操作两次数据库, 张三 -500, 李四 + 500,这中间任何一步出现问题,整个操作就必须全部回滚, 这样才能保证用户和银行都没有损失.

回滚

即在事务运行的过程中发生了某种故障，事务不能继续执行，系统将事务中对数据库的所有已完成的操作全部撤销，滚回到事务开始时的状态。（在提交之前执行）

START TRANSACTION 这个语句显式地标记一个事务的起始点。
COMMIT  表示提交事务，即提交事务的所有操作，具体地说，就是将事务中所有对数据库的更新都写到磁盘上的物理数据库中，事务正常结束。
ROLLBACK 表示撤销事务，即在事务运行的过程中发生了某种故障，事务不能继续执行，系统将事务中对数据库的所有已完成的操作全部撤销，回滚到事务开始时的状态
手动提交事务流程

执行成功的情况： 开启事务 -> 执行多条 SQL 语句 -> 成功提交事务  

执行失败的情况： 开启事务 -> 执行多条 SQL 语句 -> 事务的回滚

自动提交事务

MySQL 默认每一条 DML(增删改)语句都是一个单独的事务，每条语句都会自动开启一个事务，语句执行完毕 自动提交事务，MySQL 默认开启自动提交事务（默认在命令行执行一句即一个事务）

取消自动提交

  MySQL默认是自动提交事务,可设置为手动提交.

1)查看autocommit状态。

         状态说明：

             on ：自动提交

             oﬀ : 手动提交

MySQL 事务隔离级别(了解)

数据并发访问

一个数据库可能拥有多个访问客户端,这些客户端都可以并发方式访问数据库. 数据库的相同数据可能被多个事务同时访问,如果不采取隔离措施,就会导致各种问题, 破坏数据的完整性

并发访问会产生的问题

事务在操作时的理想状态： 所有的事务之间保持隔离，互不影响。因为并发操作，多个用户同时访问同一个 数据。可能引发并发访问的问题


设置事务隔离级别，需要退出 MySQL 再重新登录才能看到隔离级别的变化

set global transaction isolation level 级别名称; 
read uncommitted 读未提交

read committed 读已提交 

repeatable read 可重复读 

serializable 串行化

例如: 修改隔离级别为 读未提交

set global transaction isolation level read uncommitted;

五、MySQL多表&外键&数据库设计
多表
多表简述

实际开发中，一个项目通常需要很多张表才能完成。

例如一个商城项目的数据库,需要有很多张表：用户表、分类表、商品表、订单表....

多表设计上的问题

      当我们在 员工表的 dept_id 里面输入不存在的部门id ,数据依然可以添加 显然这是不合理的. 所以需要用到外键约束

外键约束

      什么是外键

      外键指的是在 从表 中 与 主表 的主键对应的那个字段,比如员工表的 dept_id,就是外键

      使用外键约束可以让两张表之间产生一个对应关系,从而保证主从表的引用的完整性

      注意：主键是为保证数据库的实体完整性，取值非空唯一；外键是保证数据库的参照完整性，值可以为空

创建外键约束

语法格式:

     新建表时添加外键

          [CONSTRAINT] [外键约束名称，自定义名称忽略时，会自动创建] FOREIGN KEY(外键字段名) REFERENCES 主表名(主键字段名)

     已有表添加外键

          ALTER TABLE 从表 ADD [CONSTRAINT] [外键约束名称] FOREIGN KEY (外键字段名) REFERENCES 主表(主 键字段名);
删除外键约束

语法格式    alter table 从表 drop foreign key 外键约束名称

外键约束的注意事项

      1) 从表外键类型必须与主表主键类型一致 否则创建失败.

      2) 添加数据时, 应该先添加主表中的数据.

      3) 删除数据时,应该先删除从表中的数据.

级联删除操作(了解)

如果想实现删除主表数据的同时,也删除掉从表数据,可以使用级联删除操作
级联删除  ON DELETE CASCADE

多表关系设计
实际开发中，一个项目通常需要很多张表才能完成。例如：一个商城项目就需要分类表(category)、 商品表(products)、订单表(orders)等多张表。且这些表的数据之间存在一定的关系，接下来我们一起学习一下多表关系设计方面的知识

表与表之间的三种关系
一对多关系: 最常见的关系, 学生对班级,员工对部门
多对多关系 : 学生与课程 , 用户与角色
一对一关系: 使用较少,因为一对一关系可以合成为一张表
一对多关系(常见)

一对多关系（1:n）

       例如：班级和学生，部门和员工，客户和订单，分类和商品

一对多建表原则

       在从表(多方)创建一个字段,字段作为外键指向主表(一方)的主键
       
    多对多关系(常见)

多对多（m:n）

       例如：老师和学生，学生和课程，用户和角色

多对多关系建表原则

       需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向各自一方的 主键。   
       
 一对一关系(了解)

一对一（1:1）

       在实际的开发中应用不多.因为一对一可以创建成一张表。

一对一建表原则

       外键唯一 主表的主键和从表的外键（唯一），形成主外键关系，外键唯一 UNIQUE

      六、多表查询
什么是多表查询

       DQL: 查询多张表,获取到需要的数据

       比如 我们要查询家电分类下 都有哪些商品,那么我们就需要查询分类与商品这两张表
       
多表查询的分类

      内连接查询

            内连接的特点:

                  通过指定的条件去匹配两张表中的数据, 匹配上就显示,匹配不上就不显示

                  比如通过: 从表的外键 = 主表的主键 方式去匹配

      隐式内连接

             from子句 后面直接写 多个表名 使用where指定连接条件的 这种连接方式是 隐式内连接. 使用where条件过滤无用的数据

            语法格式：SELECT 字段名 FROM 左表, 右表 WHERE 连接条件;     
       
      显式内连接

            使用 inner join ...on 这种方式, 就是显式内连接

            语法格式：SELECT 字段名 FROM 左表 [INNER] JOIN 右表 ON 条件; 

            -- inner 可以省略  
       
       
       外连接查询

左外连接

       左外连接 , 使用 LEFT OUTER JOIN , OUTER 可以省略

       语法格式: SELECT 字段名 FROM 左表 LEFT [OUTER] JOIN 右表 ON 条件

       左外连接的特点

              以左表为基准, 匹配右边表中的数据,如果匹配的上,就展示匹配到的数据

              如果匹配不到, 左表中的数据正常展示, 右边的展示为null.
       
  右外连接

       右外连接 , 使用 RIGHT OUTER JOIN , OUTER 可以省略

       语法格式:SELECT 字段名 FROM 左表 RIGHT [OUTER ]JOIN 右表 ON 条件

       右外连接的特点

              以右表为基准，匹配左边表中的数据，如果能匹配到，展示匹配到的数据

              如果匹配不到，右表中的数据正常展示, 左边展示为null     
       
      内连接: inner join , 只获取两张表中 交集部分的数据.
左外连接: left join , 以左表为基准 ,查询左表的所有数据, 以及与右表有交集的部分
右外连接: right join , 以右表为基准,查询右表的所有的数据,以及与左表有交集的部分
子查询 (SubQuery)
子查询概念

       一条select 查询语句的结果, 作为另一条 select 语句的一部分

子查询的特点

       子查询必须放在小括号中

       子查询一般作为父查询的查询条件使用

子查询常见分类

       where型 子查询: 将子查询的结果, 作为父查询的比较条件

       from型 子查询 : 将子查询的结果, 作为 一张表,提供给父层查询使用

       exists型 子查询: 子查询的结果是单列多行, 类似一个数组, 父层查询使用 IN 函数 ,包含子查询的结果

子查询的结果作为查询条件(where型)

       语法格式:SELECT 查询字段 FROM 表 WHERE 字段=（子查询）; 
       
    子查询的结果作为一张表（from型）

       语法格式:SELECT 查询字段 FROM （子查询）表别名 WHERE 条件;  
       
   注意： 当子查询作为一张表的时候，需要起别名，否则无法访问表中的字段。

子查询结果是单列多行（exists型）

       子查询的结果类似一个数组, 父层查询使用 IN 函数 ,包含子查询的结果
       
   子查询总结

1. 子查询如果查出的是一个字段(单列), 那就在where后面作为条件使用.

2. 子查询如果查询出的是多个字段(多列), 就当做一张表使用(要起别名).    
       
       
     七、数据库设计
数据库三范式(空间最省)

概念: 三范式就是设计数据库的规则.

为了建立冗余较小、结构合理的数据库，设计数据库时必须遵循一定的规则。在关系型数据库中这种规则就称为范式。范式是符合某一种设计要求的总结。要想设计一个结构合理的关系型数据库，必须满足一定的范式满足最低要求的范式是第一范式（1NF）。
在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF） ， 其余范式以此类推。一般说来，数据库只需满足第三范式(3NF）就行了
第一范式 1NF

概念:

原子性, 做到列不可拆分
第一范式是最基本的范式。数据库表里面字段都是单一属性的，不可再分, 如果数据表中每个字段都是不可再分的最小数据单元，则满足第一范式。

 二范式 2NF

概念:

在第一范式的基础上更进一步，目标是确保表中的每列都和主键相关。
一张表只能描述一件事.

第三范式 3NF

概念:

消除传递依赖
表的信息，如果能够被推导出来，就不应该单独的设计一个字段来存放

数据库反三范式

概念

反范式化指的是通过增加冗余或重复的数据来提高数据库的读性能
浪费存储空间,节省查询时间 (以空间换时间)
 什么是冗余字段 ?

设计数据库时，某一个字段属于一张表，但它同时出现在另一个或多个表，且完全等同于它在其本来所属表的意义表示，那么这个字段就是一个冗余字段

反三范式示例

两张表，用户表、订单表，用户表中有字段name，而订单表中也存在字段name。

总结

创建一个关系型数据库设计，我们有两种选择

1，尽量遵循范式理论的规约，尽可能少的冗余字段，让数据库设计看起来精致、优雅、让人心醉。

2，合理的加入冗余字段这个润滑剂，减少join，让数据库执行性能更高更快。


八、MySQL索引&视图&存储过程 
MySQL 索引
什么是索引

在数据库表中，对字段建立索引可以大大提高查询速度。通过善用这些索引，可以令MySQL的查询和运行更加高效。
如果合理的设计且使用索引的MySQL是一辆兰博基尼的话，那么没有设计和使用索引的MySQL就是一个人力三轮车。
拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字

       
    主键索引 (PRIMARY KEY)

       特点: 主键是一种唯一性索引,每个表只能有一个主键,用于标识数据表中的某一条记录。

       一个表可以没有主键，但最多只能有一个主键，并且主键值不能包含NULL。

       语法格式

                     创建表的时候直接添加主键索引 (最常用)

 

                            CREATE TABLE 表名(

                                   -- 添加主键 (主键是唯一性索引,不能为null,不能重复,)

                                   字段名 类型 PRIMARY KEY,

                            );

 

                     修改表结构 添加主键索引

                            ALTER TABLE 表名 ADD PRIMARY KEY ( 列名 )

唯一索引(UNIQUE)

       特点: 索引列的所有值都只能出现一次, 必须唯一.

              唯一索引可以保证数据记录的唯一性。事实上，在许多场合，人们创建唯一索引的目的往往 不是为了提高访问速度，而只是为了避免数据出现重复。
       语法格式

                     创建表的时候直接添加唯一索引
                                CREATE TABLE 表名 (
                                列名 类型( 长度 ),
                                -- 添加唯一索引
                                UNIQUE [ 索引名称 ] ( 列名 )
                                );
                     使用create语句创建: 在已有的表上创建索引
                                create unique index 索引名 on 表名(列名(长度))
                     修改表结构添加索引
                                ALTER TABLE 表名 ADD UNIQUE ( 列名 )
普通索引 (INDEX)

       普通索引（由关键字KEY或INDEX定义的索引）的唯一任务是加快对数据的访问速度。因此，应该只为那些最经常出现在查询条件（WHERE column=）或排序条件（ORDERBY column）中的数据列创建索引。

       语法格式

              使用create index 语句创建: 在已有的表上创建索引

                     create index 索引名 on 表名(列名[长度])

              修改表结构添加索引

                     ALTER TABLE 表名 ADD INDEX 索引名 (列名)

删除索引

       由于索引会占用一定的磁盘空间，因此，为了避免影响数据库的性能，应该及时删除不再使用的索引

       语法格式

              ALTER TABLE table_name DROP INDEX index_name;

 

索引的优缺点总结

       添加索引首先应考虑在 where 及 order by 涉及的列上建立索引。

       索引的优点

1. 大大的提高查询速度
2. 可以显著的减少查询中分组和排序的时间。
       索引的缺点

1. 创建索引和维护索引需要时间，而且数据量越大时间越长
2. 当对表中的数据进行增加，修改，删除的时候，索引也要同时进行维护，降低了数据的维护速度
MySQL 视图
什么是视图

1. 视图是一种虚拟表。
2. 视图建立在已有表的基础上, 视图赖以建立的这些表称为基表。
3. 向视图提供数据内容的语句为 SELECT 语句, 可以将视图理解为存储起来的 SELECT 语句.
4. 视图向用户提供基表数据的另一种表现形式
视图的作用

权限控制时可以使用 ：比如,某几个列可以运行用户查询,其他列不允许,可以开通视图 查询特定的列, 起到权限控制的作用
简化复杂的多表查询：
              视图 本身就是一条查询SQL,我们可以将一次复杂的查询 构建成一张视图, 用户只要查询视图就可以获取想要得到的信息(不需要再编写复杂的SQL)

              视图主要就是为了简化多表的查询   
       
视图与表的区别

视图是建立在表的基础上，表存储数据库中的数据，而视图只是做一个数据的展示
通过视图不能改变表中数据（一般情况下视图中的数据都是表中的列 经过计算得到的结果,不允许更新）
删除视图，表不受影响，而删除表，视图不再起作用
MySQL 存储过程 ( 了解 )
什么是存储过程

MySQL 5.0 版本开始支持存储过程。
存储过程（Stored Procedure）是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象。存储过程是为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行。
简单理解: 存储过程其实就是一堆 SQL 语句的合并。中间加入了一些逻辑控制。

存储过程的优缺点

       优点:

              存储过程一旦调试完成后，就可以稳定运行，（前提是，业务需求要相对稳定，没有变化）

              存储过程减少业务系统与数据库的交互，降低耦合，数据库交互更加快捷（应用服务器，与 数据库服务器不在同一个地区）

       缺点:

              在互联网行业中，大量使用MySQL，MySQL的存储过程与Oracle的相比较弱，所以较少使用，并且互联网行业需求变化较快也是原因之一

              尽量在简单的逻辑中使用，存储过程移植十分困难，数据库集群环境，保证各个库之间存储过程变更一致也十分困难。       
       
     
MySQL 触发器 ( 了解 )
什么是触发器

       触发器（trigger）是MySQL提供给程序员和数据分析员来保证数据完整性的一种方法，它是与表事件相关的特殊的存储过程，它的执行不是由程序调用，也不是手工启动，而是由事件来触发，比如当对一个表进行操作（insert，delete， update）时就会激活它执行。——百度百科

简单理解: 当我们执行一条sql语句的时候，这条sql语句的执行会自动去触发执行其他的sql语句。

触发器创建的四个要素
1. 监视地点（table）
2. 监视事件（insert/update/delete）
3. 触发时间（before/after）
4. 触发事件（insert/update/delete）

DCL(数据控制语言)
MySql默认使用的都是 root 用户，超级管理员，拥有全部的权限。除了root用户以外，我们还可以通过DCL语言来定义一些权限较小的用户, 分配不同的权限来管理和维护数据库。


九、JDBC
JDBC 概述
什么是JDBC

JDBC(Java Data Base Connectivity) 是 Java 访问数据库的标准规范.是一种用于执行SQL语句的Java API，可以为 多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。是Java访问数据库的标准规范.

JDBC 原理

JDBC是接口，驱动是接口的实现，没有驱动将无法完成数据库连接，从而不能操作数据库！每个数据库厂商都需要提供自己的驱动，用来连接自己公司的数据库，也就是说驱动一般都由数据库生成厂商提供。

总结:

JDBC就是由sun公司定义的一套操作所有关系型数据库的规则(接口)，而数据库厂商需要实现这套接口,提供数据库驱动jar包, 我们可以使用这套接口编程,真正执行的代码是对应驱动包中的实现类。



数据准备

-- 创建 jdbc_user表
 CREATE TABLE jdbc_user ( id INT PRIMARY KEY AUTO_INCREMENT , username VARCHAR(50), PASSWORD VARCHAR(50), birthday DATE );
-- 添加数据 
INSERT INTO jdbc_user (username, PASSWORD,birthday) VALUES('admin1', '123','1991/12/24'), ('admin2','123','1995/12/24'), ('test1', '123','1998/12/24'), ('test2', '123','2000/12/24');
MySql驱动包

1. 查看当前mysql的版本，到官网https://dev.mysql.com/downloads/connector/j/，下载相应的zip，解压zip后得到jar包
2. 将MySQL驱动包添加到jar包库文件夹中，Myjar文件夹,用于存放当前项目需要的所有jar包
3.在 idea中 配置jar包库的位置，新建一个module，并配置


API使用: 1.注册驱动

JDBC规范定义驱动接口： java.sql.Driver

MySql驱动包提供了实现类： com.mysql.jdbc.Driver


1) 代码示例

public class JDBCDemo01 {
public static void main(String[] args) throws ClassNotFoundException {
//1.注册驱动
// forName 方法执行将类进行初始化
Class.forName("com.mysql.jdbc.Driver");
}
}
2) 为什么这样可以注册驱动?

我们知道 Class类的forName方法 ,可以将一个类初始化, 现在我们一起Driver类的 看一下源码

// Driver类是MySql提供的数据库驱动类, 实现了JDBC的Driver接口 java.sql.Driver
public class Driver extends NonRegisteringDriver implements java.sql.Driver {
// 空参构造
public Driver() throws SQLException {
}
//静态代码块,Class类的 forName()方法将Driver类 加载到内存, static代码块会自动执行
static {
try {
/*
DriverManager 驱动管理类
registerDriver(new Driver) 注册驱动的方法
注册数据库驱动
*/
DriverManager.registerDriver(new Driver());
} catch (SQLException var1) {
throw new RuntimeException("Can't register driver!");
}
}
}
注：从 JDBC3 开始，目前已经普遍使用的版本。可以不用注册驱动而直接使用。 Class.forName 这句话可以省略。

API使用: 2.获得连接

Connection 接口，代表一个连接对象 ,具体的实现类由数据库的厂商实现

使用 DriverManager类的静态方法,getConnection可以获取数据库的连接


步骤总结

1. 获取驱动(可以省略)

2. 获取连接

3. 获取Statement对象

4. 处理结果集(只在查询时处理)

5. 释放资源


十、JDBC实现增删改查
JDBC工具类

什么时候自己创建工具类？

如果一个功能经常要用到，我们建议把这个功能做成一个工具类，可以在不同的地方重用。

“获得数据库连接”操作，将在以后的增删改查所有功能中都存在，可以封装工具类JDBCUtils。提供获取连接对象的方法，从而达到代码的重复利用。

工具类包含的内容

1) 可以把几个字符串定义成常量：用户名，密码，URL，驱动类

2) 得到数据库的连接：getConnection()

3) 关闭所有打开的资源：


SQL注入问题
# SQL注入演示，当拼接字符串组成的sql就会有这样的问题

-- 填写一个错误的密码
SELECT * FROM jdbc_user WHERE username = 'tom' AND PASSWORD = '123' OR '1' = '1';
--如果这是一个登陆操作,那么用户就登陆成功了.显然这不是我们想要看到的结果
问题分析

1) 什么是SQL注入?

我们让用户输入的密码和 SQL 语句进行字符串拼接。用户输入的内容作为了 SQL 语句语法的一部分，改变了原有SQL 真正的意义，以上问题称为 SQL 注入 .

2) 如何实现的注入

       根据用户输入的数据,拼接处的字符串

       select * from jdbc_user where username = 'abc' and password = 'abc' or '1'='1'

       name='abc' and password='abc' 为假 '1'='1' 真

       相当于 select * from user where true=true; 查询了所有记录


3) 如何解决

要解决 SQL 注入就不能让用户输入的密码和我们的 SQL 语句进 行简单的字符串拼接。

预处理对象

PreparedStatement 接口介绍

PreparedStatement 是 Statement 接口的子接口，继承于父接口中所有的方法。它是一个预编译的 SQL 语句对象.

预编译:  是指SQL 语句被预编译,并存储在 PreparedStatement 对象中。然后可以使用此对象多次高效地执行该语句。

PreparedStatement 特点

因为有预先编译的功能，提高 SQL 的执行效率。

可以有效的防止 SQL 注入的问题，安全性更高

获取PreparedStatement对象

通过Connection创建PreparedStatement对象

使用PreparedStatement的步骤

1) 编写 SQL 语句，未知内容使用?占位：
"SELECT * FROM jdbc_user WHERE username=? AND password=?";
2) 获得 PreparedStatement 对象

3) 设置实际参数：setXxx( 占位符的位置, 真实的值)

4) 执行参数化 SQL 语句

5) 关闭资源


Statement 与 PreparedStatement的区别?

1. Statement用于执行静态SQL语句，在执行时，必须指定一个事先准备好的SQL语句。

2. PrepareStatement是预编译的SQL语句对象，语句中可以包含动态参数“?”，在执行时可以为“?”动态设置参数值。

3. PrepareStatement可以减少编译次数提高数据库性能。



JDBC 控制事务

开发步骤

       1. 获取连接

       2. 开启事务

       3. 获取到 PreparedStatement , 执行两次更新操作

       4. 正常情况下提交事务

       5. 出现异常回滚事务

       6. 最后关闭资源


十一、数据库连接池&DBUtils
数据库连接池
1 连接池介绍

         1) 什么是连接池

实际开发中“获得连接”或“释放资源”是非常消耗系统资源的两个过程，为了解决此类性能问题，通常情况我们采用连接池技术，来共享连接Connection。这样我们就不需要每次都创建连接、释放连接了，这些操作都交给了连接池.
        2) 连接池的好处

用池来管理Connection，这样可以重复使用Connection。 当使用完Connection后，调用Connection的close()方法也不会真的关闭Connection，而是把Connection“归还”给池。

 3 如何使用数据库连接池

Java为数据库连接池提供了公共的接口：javax.sql.DataSource，各个厂商需要让自己的连接池实现这个接口。

这样应用程序可以方便的切换不同厂商的连接池！

常见的连接池有 DBCP连接池, C3P0连接池, Druid连接池, 接下里我们就详细学习一下

4 数据准备

#创建数据库
CREATE DATABASE db5 CHARACTER SET utf8;
#使用数据库
USE db5;
#创建员工表
CREATE TABLE employee (
eid INT PRIMARY KEY AUTO_INCREMENT ,
ename VARCHAR (20), -- 员工姓名
age INT , -- 员工年龄
sex VARCHAR (6), -- 员工性别
salary DOUBLE , -- 薪水
empdate DATE -- 入职日期
);


十二、DBUtils工具类
1 DBUtils简介

使用JDBC我们发现冗余的代码太多了,为了简化开发 我们选择使用 DbUtils

Commons DbUtils是Apache组织提供的一个对JDBC进行简单封装的开源工具类库，使用它能够简化JDBC应用程序的开发，同时也不会影响程序的性能。

使用方式:

       DBUtils就是JDBC的简化开发工具包。需要项目导入commons-dbutils-1.6.jar。

       http://commons.apache.org/proper/commons-dbutils/download_dbutils.cgi

1.1 Dbutils核心功能介绍

1. QueryRunner 中提供对sql语句操作的API.
2. ResultSetHandler接口，用于定义select操作后，怎样封装结果集.
3. DbUtils类,他就是一个工具类,定义了关闭资源与事务处理相关方法.
2 案例相关知识

2.1 表和类之间的关系

整个表可以看做是一个类
表中的一行记录,对应一个类的实例(对象)
表中的一列,对应类中的一个成员属性

2.2 JavaBean组件

1) JavaBean 就是一个类, 开发中通常用于封装数据,有一下特点

1. 需要实现 序列化接口, Serializable (暂时可以省略)
2. 提供私有字段: private 类型 变量名;
3. 提供 getter 和 setter
4. 提供 空参构造
2) 创建Employee类和数据库的employee表对应


2.3 DBUtils完成 CRUD

2.3.1 QueryRunner核心类

       构造方法

QueryRunner()
QueryRunner(DataSource ds) ,提供数据源（连接池），DBUtils底层自动维护连接connection
       常用方法

update(Connection conn, String sql, Object... params) ，用来完成表数据的增加、删除、更新操作
query(Connection conn, String sql, ResultSetHandler<T> rsh, Object... params) ，用来完成表数据的查询操作

   步骤

1.创建QueryRunner(手动或自动)
2.占位符方式 编写SQL
3.设置占位符参数
4.执行


2.3.4 QueryRunner实现查询操作

2.3.4.1 ResultSetHandler接口简介

ResultSetHandler可以对查询出来的ResultSet结果集进行处理，达到一些业务上的需求。
2.3.4.2 ResultSetHandler 结果集处理类

本例展示的是使用ResultSetHandler接口的几个常见实现类实现数据库的增删改查，可以大大减少代码量，优化程序。
每一种实现类都代表了对查询结果集的一种处理方式


2.3.4.3 ResultSetHandler 常用实现类测试

QueryRunner的查询方法
query方法的返回值都是泛型,具体的返回值类型,会根据结果集的处理方式,发生变化


3.数据库批处理

3.1 什么是批处理

批处理(batch) 操作数据库
批处理指的是一次操作中执行多条SQL语句，批处理相比于一次一次执行效率会提高很多。
当向数据库中添加大量的数据时，需要用到批处理。
       举例: 送货员的工作：

未使用批处理的时候，送货员每次只能运送 一件货物给商家；
使用批处理，则是送货员将所有要运送的货物, 都用车带到发放处派给客户。

4.MySql元数据

4.1 什么是元数据

除了表之外的数据都是元数据,可以分为三类
    查询结果信息： UPDATE 或 DELETE语句 受影响的记录数。
    数据库和数据表的信息： 包含了数据库及数据表的结构信息。
    MySQL服务器信息： 包含了数据库服务器的当前状态，版本号等。


4.3 使用JDBC 获取元数据

通过JDBC 也可以获取到元数据,比如数据库的相关信息,或者当我们使用程序查询一个不熟悉的表时, 我们可以通过获取元素据信息,了解表中有多少个字段,字段的名称 和 字段的类型.

4.3.1 常用类介绍

JDBC中描述元数据的类

DatabaseMetaData	描述数据库的元数据对象
ResultSetMetaData	描述结果集的元数据对象
获取元数据对象的方法 : getMetaData ()

connection 连接对象, 调用 getMetaData () 方法,获取的是DatabaseMetaData 数据库元数据对象
PrepareStatement 预处理对象调用 getMetaData () , 获取的是ResultSetMetaData , 结果集元数据对象


十二、XML  
1. XML基本介绍

1.1 概述

XML即可扩展标记语言（Extensible Markup Language）

W3C在1998年2月发布1.0版本，2004年2月又发布1.1版本，但因为1.1版本不能向下兼容1.0版本，所以1.1没有人用。同时，在2004年2月W3C又发布了1.0版本的第三版。我们要学习的还是1.0版本 !

特点

可扩展的, 标签都是自定义的
语法十分严格

2. XML的语法

2.1 XML文档声明格式

文档声明必须为结束；
文档声明必写在第一行；
<?xml version="1.0" encoding="UTF-8"?>
1) 语法格式:

2) 属性说明:

        versioin：指定XML文档版本。必须属性，因为我们不会选择1.1，只会选择1.0；

        encoding：指定当前文档的编码。可选属性，默认值是utf-8；

2.2 元素

Element 元素: 是XML文档中最重要的组成部分

元素的命名规则

1. 不能使用空格，不能使用冒号
2. xml 标签名称区分大小写
3. XML 必须有且只有一个根元素
语法格式:

<users><users>
1) XML 必须有且只有一个根元素，它是所有其他元素的父元素，比如以下实例中 users 就是根元素：
<?xml version="1.0" encoding="utf-8" ?> 
<users> </users>
2) 普通元素的结构开始标签、元素体、结束标签组成。
<hello> 大家好 </hello>
3) 元素体：元素体可以是元素，也可以是文本
<hello> 
    <a>你好</a> 
</hello>
4) 空元素：空元素只有开始标签，而没有结束标签，但元素必须自己闭合
<close/>
2.3 属性

<bean id="" class=""> </bean>
1. 属性是元素的一部分，它必须出现在元素的开始标签中
2. 属性的定义格式：属性名=属性值，其中属性值必须使用单引或双引
3. 一个元素可以有0~N个属性，但一个元素中不能出现同名属性
4. 属性名不能使用空格、冒号等特殊字符，且必须以字母开头
2.4 注释

        XML的注释，以“ <!--”开始，以“--> ”结束。注释内容会被XML解析器忽略！

3. XML约束

       在XML技术里，可以编写一个文档来约束一个XML文档的书写规范，这称之为XML约束。

常见的xml约束：

DTD
Schema
作为程序员只要掌握两点

会阅读 会引入 不用自己编写


3.1 DTD约束

       DTD（Document Type Defifinition），文档类型定义，用来约束XML文档。规定XML文档中元素的名称，子元素的名称及顺序，元素的属性等。

3.1.1 编写DTD

开发中，我们不会自己编写DTD约束文档

通常情况我们都是通过框架提供的DTD约束文档，编写对应的XML文档。常见框架使用DTD约束有：Struts2、hibernate等。


3.1.2 引入DTD

引入dtd文档到xml文档中,两种方式
内部dtd：将约束规则定义在xml文档中
外部dtd：将约束的规则定义在外部的dtd文件中
本地：<!DOCTYPE 根据签名SYSTEM "dtd文件的位置">

网络：<!DOCTYPE 根据签名PUBLIC "dtd文件名字" "dtd文件的位置URL">


3.2 Schema约束

3.2.1 什么是Schema

1. Schema是新的XML文档约束, 比DTD强大很多，是DTD 替代者；
2. Schema本身也是XML文档，但Schema文档的扩展名为xsd，而不是xml。
3. Schema 功能更强大，内置多种简单和复杂的数据类型
4. Schema 支持命名空间 (一个XML中可以引入多个约束文档)


4. XML 解析

4.1 解析概述

当将数据存储在XML后，我们就希望通过程序获得XML的内容。如果我们使用Java基础所学习的IO知识是可以完成的，不过你需要非常繁琐的操作才可以完成，且开发中会遇到不同问题（只读、读写）。
人们为不同问题提供不同的解析方式，并提交对应的解析器，方便开发人员操作XML。
4.2 XML解析方式

开发中比较常见的解析方式有两种，如下：

DOM：要求解析器把整个XML文档装载到内存，并解析成一个Document对象。
                        优点：元素与元素之间保留结构关系，故可以进行增删改查操作。

                        缺点：XML文档过大，可能出现内存溢出显现。

SAX：是一种速度更快，更有效的方法。它逐行扫描文档，一边扫描一边解析。并以事件驱动的方式进行具体解析，每执行一行，都将触发对应的事件。（了解）
                优点：占用内存少 处理速度快，可以处理大文件

                缺点：只能读，逐行后将释放资源。
                
4.3 XML常见的解析器

解析器：就是根据不同的解析方式提供的具体实现。有的解析器操作过于繁琐，为了方便开发人员，有提供易于操作的解析开发包

JAXP：sun公司提供的解析器，支持DOM和SAX两种思想

DOM4J：一款非常优秀的解析器 , Dom4j是一个易用的、开源的库，用于XML，XPath和XSLT。它应用于Java平台，采用了Java集合框架并完全支持DOM，SAX和JAXP。

Jsoup：jsoup 是一款Java 的HTML解析器 ,也可以解析XML

PULL：Android内置的XML解析方式，类似SAX。

4.4 dom4j 的使用

4.4.1 导入JAR包

https://dom4j.github.io/

4.4.2 API介绍

使用核心类SaxReader加载xml文档获得Document，通过Document 对象获得文档的根元素，然后就可以操作了
常用API如下：

SaxReader对象
             read(…) 加载执行xml文档

Document对象
             getRootElement() 获得根元素

Element对象
             elements(…) 获得指定名称的所有子元素。可以不指定名称

             element(…) 获得指定名称的第一个子元素。可以不指定名称

             getName() 获得当前元素的元素名

             attributeValue(…) 获得指定属性名的属性值

             elementText(…) 获得指定名称子元素的文本值

             getText() 获得当前元素的文本内容                
4.5 xpath方式读取xml

4.5.1 xpath介绍

XPath 是一门在 XML 文档中查找信息的语言。 可以是使用xpath查找xml中的内容。
XPath 的好处

由于DOM4J在解析XML时只能一层一层解析，所以当XML文件层数过多时使用会很不方便，结合XPATH就可以直接获取到某个元素

1）需要再导入 jaxen-1.1-beta-6.jar

http://www.java2s.com/Code/Jar/j/Downloadjaxen11beta6jar.htm

4.5.3 API介绍

2) 常用方法：

selectSingleNode(query): 查找和 XPath 查询匹配的一个节点。 (参数是Xpath 查询串。)
selectNodes(query): 得到的是xml根节点下的所有满足 xpath 的节点；( 参数是Xpath 查询串。)
       Node: 节点对象











